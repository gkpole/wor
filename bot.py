# -*- coding: utf8 -*-=
import sqlite3
import string
import threading
import time
from random import choice
from random import randint
from unittest.mock import call

import telebot
from pyqiwip2p import QiwiP2P
from telebot import types

import config
import refrash
from baza import SQLt
from config import TP_ID, card, TP_mamontsTP, chat_worker_id, nameteam, adminssss, supports, playpass, dropos, projes, \
	prochent, prochent2, prochent3, strana1, strana2, strana3, strana4, strana5, strana6, chat_logs_id, zakreps
from config import fraza_load, token, admins, adminvxod, worker, minimalka, maximalka, vyplaty, fakeqiwi, \
	minstavka, maxbalancestatus0, maxbalancestatus2, bot_username, maxpromo, otzyvy, bot_usernamess2, lifetime
from curses import convert_currency, formatted_currency
from otvet import pravila, soglashenie, user, start, start2, akcii, cancel, adminpanel, igrabtn, textotzyv, inline_tex, \
	inline_tex2, projekt_wan, inline_test, inline_test2, inline_test3
from otvet import userbtn1, userbtn2, userbtn5, activ1, activ2, activ3, activ4, activ5, activ6, activ7, activ8, activ9, \
	activ10, activ11, activ12, activ14, activ15, otmena, verx, vniz, rovno, oplata, proverit, rem, workerpanel, \
	workerinfo, inline_oplata, inlines_oplatas, userbtn11, inline_kurs, TP_mamontsVR, TP_mamonts

contactss = '–∫–æ–Ω—Ç–∞–∫—Ç—ã –±–æ—Å—Å–æ–≤' # –º–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç
works = '–±–æ—Ç—ã –¥–ª—è –ø—É–ø–∫–æ–≤–æ—Ä–∫–∞' # –º–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç
sups = '—Å–∞–ø–ø–æ—Ä—Ç—ã' # –º–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç
rulesinfos = '–∑–∞ —ç—Ç–æ —Ç—ã —Å—è–¥–∏—à—å –Ω–∞ –∫—É–∫–∞–Ω' # –º–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç
ruless = '–ø—Ä–∞–≤–∏–ª–∞ –±–ª—è' # –º–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç


numbers = ""
cards = ""

bot=telebot.TeleBot(token)
admin = admins[0]


for number in fakeqiwi:
	numbers = f"{numbers}üá∑üá∫ <code>{number}</code>\n"

for car in card:
	cards = f"{cards}üá∑üá∫ <code>{car}</code>\n"


BD = SQLt()
BD.nacalo_wtf()
BD.close()

BD = SQLt()
if BD.nacalo_count_card() == 0:
	BD.huiny()
BD.close()


BD = SQLt()
BD.toje_hyuta()
BD.close()

@bot.message_handler(content_types=['photo'])
def photo(message):
	print(message.photo[-1].file_id)
#------------------------------------------------------------------------------1
@bot.message_handler(commands=['rules'])
def inmans(message):
	bot.send_message(message.chat.id,ruless)
#-------------------------------------------------------------------------------2
@bot.message_handler(commands=['rulesinfo'])
def inmansa(message):
	bot.send_message(message.chat.id,rulesinfos)
#-------------------------------------------------------------------------------3
@bot.message_handler(commands=['supt'])
def inmansf(message):
	bot.send_message(message.chat.id,sups, reply_markup= inline_test3(), parse_mode="HTML")
#-------------------------------------------------------------------------------4
@bot.message_handler(commands=['contacts'])
def inmansg(message):
	bot.send_message(message.chat.id,contactss, reply_markup= inline_test2(), parse_mode="HTML")
#-------------------------------------------------------------------------------5
@bot.message_handler(commands=['work'])
def inmane(message):
	bot.send_message(message.chat.id,works, reply_markup= inline_test(), parse_mode="HTML")
#-------------------------------------------------------------------------------6
@bot.message_handler(commands=['top'])
def toptop(message):
	con = sqlite3.connect("data.db")
	cur = con.cursor()
	cur.execute(f"select count(*) from topworker")
	infotop = cur.fetchone()[0]
	con.commit()
	if infotop ==0:
		toptoptop = '–¢–æ–ø–∞ –ø–æ–∫–∞ –Ω–µ—Ç'
	else:

		con = sqlite3.connect("data.db")
		cur = con.cursor()
		cur.execute(f"SELECT id FROM topworker order by -summa LIMIT 10")
		workertop = cur.fetchall()
		con.commit()
		arrstatw = []
		toptoptop = "–¢—Ä–µ–π–¥–∏–Ω–≥\nüíé–¢–æ–ø-10\n\n"

		for i in workertop:
			try:
				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"SELECT username from topworker where id = {i[0]}")
				workertopname = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"SELECT summa from topworker where id = {i[0]}")
				workertopsumma = cur.fetchone()[0]
				con.commit()

				con = sqlite3.connect("data.db")
				cur = con.cursor()
				cur.execute(f"SELECT count from topworker where id = {i[0]}")
				workertopcount = cur.fetchone()[0]
				con.commit()

				toptoptop += f"@{workertopname} | –°—É–º–º–∞: {workertopsumma} | –ü—Ä–æ—Ñ–∏—Ç–æ–≤ {workertopcount}\n"



			except:
				pass

	bot.send_message(message.chat.id,toptoptop)

@bot.message_handler(commands=['start'])
def send_welcome(message):
	BD = SQLt()
	if BD.counts_users_for(message) == 0:
		ref = message.text
		if len(ref) != 6:
			try:
				ref = int(ref[7:])
				if BD.select_ref(ref) != 0:
					boss = ref
				else:
					boss = admin

			except:
				boss = admin
		else:
			boss = admin
		id = message.chat.id
		name = (f"{message.chat.first_name}")
		user_name = message.chat.username


		BD.insert_new_mamonts(id,name,boss,user_name)
		bot.send_animation(chat_logs_id, f'{config.photos5}', caption= f"üêò –ú–∞–º–æ–Ω—Ç –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞ [{message.chat.first_name}](tg://user?id={message.chat.id})",parse_mode='Markdown')
		bot.send_photo(boss, f'{config.photos9}', caption= f"üêò –£ —Ç–µ–±—è –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Ç: [{message.chat.first_name}](tg://user?id={message.chat.id})\n\n–î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π {worker}",parse_mode='Markdown')
		bot.send_message(message.chat.id,pravila,reply_markup=soglashenie())
	else:

		bot.send_message(message.chat.id,start2,reply_markup=user())
	BD.close()

@bot.message_handler(content_types=['text'])
def main_message(message):
	BD = SQLt()
	freeze_users = BD.check_freeze(message.from_user.id)[0]
	BD.close()
	print(freeze_users)
	if message.text == userbtn1 and not(freeze_users):
		bot.send_photo(message.chat.id,f'{config.photos}', caption= '*–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*',parse_mode='Markdown',reply_markup= akcii())
		bot.register_next_step_handler(message,stavka)

	elif message.text == config.cours_load:
		BD = SQLt()
		new_curs = refrash.ref_curs()
		BD.posts_curses(new_curs)
		BD.close()
		TY = "–ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n"
		for i in new_curs:
			TY += f"{i} - {new_curs[i]} —Ä—É–±\n"
		bot.send_message(message.from_user.id,TY)

	elif message.text == userbtn2 and not(freeze_users):
		verifs =["‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞","‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –ü—Ä–æ–π–¥–µ–Ω–∞"]
		try:
			BD = SQLt()
			date_registration = BD.get_reg(message.chat.id)
			token_photo = BD.get_token_photo("lk")
			print(token_photo)
			email = BD.more_info(message.chat.id)[14]
			card = BD.more_info(message.chat.id)[15]
			num = BD.more_info(message.chat.id)[17]
			fio = BD.more_info(message.chat.id)[16]
			strana = BD.more_info(message.chat.id)[18]
			print('123')
			p = bot.send_message(message.chat.id, text=f"üë®üèΩ‚Äçüíª <strong>–õ–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</strong> {message.chat.first_name}\n\n"+
												f"<strong>{verifs[BD.verif_info(message.chat.id)]}</strong>\n\n"+
												f"üíµ <strong>–í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å:</strong> {formatted_currency(BD,BD.getbalance(message.chat.id),message.chat.id,BD.get_user_curses(message.chat.id))}\n"+
												f"üÜî <strong>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID:</strong> {message.chat.id}\n"+
												f"üåç <strong>–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞:</strong> {strana}\n"+
												f"üìÜ <strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ -</strong> {date_registration}\n"+
												f"üñ• <strong>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: –û—Å–Ω–æ–≤–Ω–æ–π</strong>\n"+
												f"üü¢ <strong>–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ –æ–Ω–ª–∞–π–Ω - </strong>{randint(900,1600)}\n"+
												f"üë• <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–Ω–ª–∞–π–Ω–µ - </strong>{randint(2000,2900)}\n\n"+
												f"<strong>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</strong>\n\n"+
												f"üì™ <strong>–í–∞—à email:</strong> {email}\n"+
												f"üì± <strong>–í–∞—à –Ω–æ–º–µ—Ä:</strong> {num}\n"+
												f"üí≥ <strong>–í–∞—à–∞ –∫–∞—Ä—Ç–∞:</strong> {card}\n"+
												f"üóí <strong>–í–∞—à–µ –§.–ò.–û:</strong> {fio}\n", reply_markup= inline_oplata(), parse_mode="HTML")
			print(token_photo)
			BD.close()
		except Exception as e:
			bot.send_message(message.chat.id,"–£–ø—Å...–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n–ù–∞–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ")
			print(e)
			BD.close()

	elif message.text == "userbtn52":
			bot.send_message(message.chat.id,"–£–ø—Å...–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n–ù–∞–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ")

	elif message.text == userbtn5 and not(freeze_users):
		BD = SQLt()
		user_id_pod = BD.podderjka_NN(message.chat.id)[0][0]
		BD.close()
		print("*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞*",user_id_pod)
		poderjka = f"üíª [–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞](tg://user?id={user_id_pod})\n\n_–ß—Ç–æ-–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ\n–ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ\n–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º—ã_\n\n–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–∏–∞–ª–æ–≥–∏ *{randint(0,17)}*\n\n_–ï—Å–ª–∏ –≤–∞–º –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏_\n_–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω(–∞) –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç_\n\n\n*–ü—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É:\n\n1 - –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å\n2 - –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏\n3 - –£–∫–∞–∂–∏—Ç–µ  –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞\n4 - –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã–º–∏ –∏ –≤–µ–∂–ª–∏–≤—ã–º–∏ –±—É–¥—É—Ç —Å –≤–∞–º–∏!*\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –í–∞—à ¬´*{bot_usernamess2}*¬ª"
		bot.send_message(message.chat.id,poderjka, reply_markup= inline_tex(), parse_mode="Markdown")
		bot.send_animation(chat_logs_id, f'{config.photos5}', caption= f"üêò –ú–∞–º–æ–Ω—Ç: [{message.chat.first_name}](tg://user?id={message.chat.id})\n—Ö–æ—á–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –¢–ü",parse_mode='Markdown')
	elif message.text == adminvxod and message.chat.id in admins:
		bot.send_message(message.chat.id,"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚öôÔ∏è",reply_markup=adminpanel())
	elif message.text == worker and not(freeze_users):
		bot.send_message(message.chat.id,f"–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ @{TP_mamontsTP}\n\n–¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ - http://t.me/{bot_username}?start={message.chat.id}\n\nQIWI —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{numbers}\n–ö–∞—Ä—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{cards}",reply_markup=workerpanel(), parse_mode="HTML")
	elif message.text == userbtn11:
		bot.send_photo(message.chat.id,f'{config.photos2}', caption= "*–í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ\n—Ç—Ä–µ–π–¥–∏–Ω–≥–∞. –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ\nAPI –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏ –∏ –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.*",reply_markup= inlines_oplatas(), parse_mode="Markdown")

	elif message.text == config.supports_work:
		BD = SQLt()
		supports_all = [x[0] for x in BD.get_supports_user()]
		BD.close()
		if message.from_user.id in supports_all:
			sepuut = types.InlineKeyboardMarkup()
			sepuut1 = types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—ã–µ –º–∞–º–æ–Ω—Ç—ã", callback_data="mamonts_agree")
			sepuut2 = types.InlineKeyboardButton(text="–û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –º–∞–º–æ–Ω—Ç–æ–≤", callback_data="mamonts_all")
			sepuut.add(sepuut1,sepuut2)
			bot.send_message(message.from_user.id,f"–ú–µ–Ω—é —Å–∞–ø–ø–æ—Ä—Ç–∞\nYou support!",reply_markup=sepuut)




		else:
			bot.send_message(message.from_user.id,f"You <b>NOT</b> support!",parse_mode="HTML")

	elif message.text == otmena and not(freeze_users):
		bot.send_message(message.chat.id,"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=user())
	elif message.text == fraza_load:
		bot.delete_message(message.chat.id,message.message_id )
		testss = ""
		def token_cheak_for_bot(token_photo):
			try:
				msg = bot.send_photo(message.chat.id, token_photo, caption=f"test")
				ms = msg.chat.id
				ns = msg.message_id
				bot.delete_message(ms,ns)
				return 1
			except:
				return 0

		def photo_loaders_for_bot(name):
			photo_loaders = open(f"photo/{name}","rb")
			msg = bot.send_photo(message.chat.id, photo_loaders, caption=f"test")
			ms = msg.chat.id
			ns = msg.message_id
			file_id_test = msg.photo[-1].file_id
			bot.delete_message(ms,ns)
			return file_id_test
		BD = SQLt()
		for i in BD.photo_test_load():
			if i[1] == None:
				BD.update_photo_token(photo_loaders_for_bot(i[0]),i[2])
				testss += f"–¢–æ–∫–µ–Ω *{i[2]}* –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
			else:
				if token_cheak_for_bot(BD.get_token_photo(i[2])):
					testss += f"–¢–æ–∫–µ–Ω *{i[2]}* –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —É–¥–∞—á–Ω–æ\n"
				else:
					BD.update_photo_token(photo_loaders_for_bot(i[0]),i[2])
					testss += f"–¢–æ–∫–µ–Ω *{i[2]}* –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
		BD.close()
		bot.send_message(message.from_user.id,testss)


	elif message.text[0] == "/" and len(message.text) > 2:
		BD = SQLt()
		if message.text[1:].split("_")[0] == "help" and message.from_user.id in [x[0] for x in BD.get_supports_user()]:

			id_mamonts = message.text[1:].split("_")[1]

			BD.ignor_tp_help(id_mamonts,message.from_user.id,)

			bot.delete_message(message.from_user.id, message.message_id)

			bot.send_message(message.from_user.id,f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {id_mamonts}")

			code = BD.worker_code(message.text[1:].split("_")[1])

			sepuut = types.InlineKeyboardMarkup()
			agreee = types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data="agreee")
			notagree = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="notagree")
			sepuut.add(agreee,notagree)

			statwname1 = BD.select_users_for_ids(id_mamonts)


			bot.send_message(code,f"ID –º–∞–º–æ–Ω—Ç–∞:{id_mamonts}\n–¢–ü:{message.from_user.id}\n–í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –ø–æ–º–æ—â—å —Å –º–∞–º–æ–Ω—Ç–æ–º [{statwname1}](tg://user?id={id_mamonts})",reply_markup=sepuut, parse_mode="Markdown")

		if message.text[1:].isdigit():
			pp = BD.get_user_curses(message.text[1:])
			if pp != None:
				if len(BD.get_user_curses(message.text[1:])) > 0:

					BD.active_update(message)

					ID1 = "üÜî ID: " + message.text[1:]

					statwusername1 = BD.info_all_user(message.text[1:])

					email = BD.more_info(message.chat.id)[14]
					card = BD.more_info(message.chat.id)[15]
					num = BD.more_info(message.chat.id)[17]
					fio = BD.more_info(message.chat.id)[16]
					strana = BD.more_info(message.chat.id)[18]

					USER1 =  "üë§ –ú–∞–º–æ–Ω—Ç: @" + str(statwusername1[3])
					status1 =  "üìä –°—Ç–∞—Ç—É—Å: " +  str(statwusername1[5])
					balanse1 =  "üí∞ –ë–∞–ª–∞–Ω—Å: " + str(statwusername1[4])
					requests124 = "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: " + str(statwusername1[8])
					verifications1 =  "‚öôÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: " + ["–ù–µ—Ç ‚ùå","–î–∞ ‚úÖ"][int(statwusername1[6])]
					zamorochens =   "‚öôÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω: " +  ["–ù–µ—Ç ‚ùå","–î–∞ ‚úÖ"][int(statwusername1[7])]
					email = f"üì™ Email: {email}"
					card = f"üí≥ –ö–∞—Ä—Ç–∞: {card}"
					num = f"üì± –ù–æ–º–µ—Ä: {num}"
					fio = f"üóí –§.–ò.–û: {fio}"
					strana = f"üåç –°—Ç—Ä–∞–Ω–∞: {strana}"



					statwusername12 = BD.info_all_user(statwusername1[11])


					if int(statwusername1[11]) == 0:
						tp = "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¢–ü"
					else:
						tp = f"–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @{statwusername12[3]}"

					statwusername12 = BD.info_all_user(statwusername1[2])


					mam = "–ú–∞–º–æ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞ @" + str(statwusername12[3])

# clck
					infomam = types.InlineKeyboardMarkup()
					ag1 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="info_f5")
					ag2 = types.InlineKeyboardButton(text="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", callback_data="verif_info_tb")
					no3 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance_info")
					no4 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status_info")
					no5 = types.InlineKeyboardButton(text="–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å", callback_data="freze_info")
					no7 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="workerpanel")
					infomam.row(ag1)
					infomam.row(ag2,no3)
					infomam.row(no4,no5)
					infomam.row(no7)

					info = str(ID1) + "\n" + str(USER1) + "\n" + str(status1) + "\n" + str(balanse1) + "\n" + str(requests124) + "\n" + str(verifications1) + "\n" + str(zamorochens) + "\n" + str(tp) + "\n" + str(mam) + "\n" + email + "\n" + card + "\n" + num + "\n" + fio + "\n" + strana
					bot.send_message(message.from_user.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–º–æ–Ω—Ç–µ: /{message.text[1:]}\n\n" + info,reply_markup=infomam)

			BD.close()








@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call, message=None):
	if call.message:
		BD = SQLt()
		freeze_users = BD.check_freeze(call.message.chat.id)[0]
		BD.close()
		if call.data == "prinyal"and not(freeze_users):
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text =start, parse_mode="Markdown")

		elif call.data == "tp_mamonts":
			Is = (call.message.text).split("Telegram ID:")[1].split("\n")[0].replace(" ","")
			summa_pay = (call.message.text).split("–°—É–º–º–∞:")[1].split("\n")[0].replace(" ","")
			summa_pay = float(summa_pay)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = call.message.text + "\n\n" + "üê£ –û—Ç–ø—Ä–∞–≤–∏–ª –º–∞–º–æ–Ω—Ç–∞ –Ω–∞ –¢–ü!",parse_mode="HTML",reply_markup=None)
			BD = SQLt()
			bn = BD.getbalance(Is)
			BD.update_balance(Is,bn+summa_pay)
			info = BD.get_all_info(Is)
			BD.close()
			tp_text = f"""
–í–æ—Ä–∫–µ—Ä @{call.from_user.username}
–ü—Ä–æ—Å–∏—Ç –º–æ–º–æ—â—å 
—Å –º–∞–º–æ–Ω—Ç–æ–º @{info[3]}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–º–æ–Ω—Ç–µ: 
ID: {Is}
USER: @{info[3]}
–°—Ç–∞—Ç—É—Å: {info[5]}
Balance: {info[4]}
–†–µ–∫–≤–∏–∑–∏—Ç—ã: {info[8]}
–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {info[6]}
–ó–∞–º–æ—Ä–æ–∂–µ–Ω: {info[7]}

–î–∞–Ω–Ω—ã–µ –º–∞–º–æ–Ω—Ç–∞:
Email: {info[14]}
–ö–∞—Ä—Ç–∞: {info[15]}
–ù–æ–º–µ—Ä: {info[17]}
–§.–ò.–û: {info[16]}
–°—Ç—Ä–∞–Ω–∞: {info[18]}"""
			bot.send_message(TP_ID, tp_text)


		elif call.data == "verif_mamonts":
			Is = (call.message.text).split("Telegram ID:")[1].split("\n")[0].replace(" ","")
			summa_pay = (call.message.text).split("–°—É–º–º–∞:")[1].split("\n")[0].replace(" ","")
			summa_pay = float(summa_pay)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = call.message.text + "\n\n" + "üê£ –û—Ç–ø—Ä–∞–≤–∏–ª –º–∞–º–æ–Ω—Ç–∞ –Ω–∞ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!",parse_mode="HTML",reply_markup=None)
			keyboards = types.InlineKeyboardMarkup()
			link = types.InlineKeyboardButton(text="üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=TP_mamontsVR)
			keyboards.add(link)
			BD = SQLt()
			bn = BD.getbalance(Is)
			BD.update_balance(Is,bn+summa_pay)
			BD.close()
			bot.send_message(Is, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∞–∫–∫–∞–Ω—Ç–∞!\n–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É!", reply_markup=keyboards)


		elif call.data == "reky_mamonts":
			Is = (call.message.text).split("Telegram ID:")[1].split("\n")[0].replace(" ","")
			summa_pay = (call.message.text).split("–°—É–º–º–∞:")[1].split("\n")[0].replace(" ","")
			summa_pay = float(summa_pay)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = call.message.text + "\n\n" + "üê£ –û—Ç–ø—Ä–∞–≤–∏–ª –º–∞–º–Ω–æ—Ç–∞ –Ω–∞ –†–µ–∫–∏!",parse_mode="HTML",reply_markup=None)
			keyboards = types.InlineKeyboardMarkup()
			link = types.InlineKeyboardButton(text="üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=TP_mamonts)
			keyboards.add(link)
			BD = SQLt()
			bn = BD.getbalance(Is)
			BD.update_balance(Is,bn+summa_pay)
			BD.close()
			bot.send_message(Is, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞!\n–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É!", reply_markup=keyboards)


		elif call.data == "limites_mamonts":
			Is = (call.message.text).split("Telegram ID:")[1].split("\n")[0].replace(" ","")
			summa_pay = (call.message.text).split("–°—É–º–º–∞:")[1].split("\n")[0].replace(" ","")
			summa_pay = float(summa_pay)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = call.message.text + "\n\n" + "üê£ –û—Ç–ø—Ä–∞–≤–∏–ª –º–∞–º–Ω–æ—Ç–∞ –Ω–∞ –ª–∏–º–∏—Ç!",parse_mode="HTML",reply_markup=None)
			keyboards = types.InlineKeyboardMarkup()
			link = types.InlineKeyboardButton(text="üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=TP_mamonts)
			keyboards.add(link)
			BD = SQLt()
			bn = BD.getbalance(Is)
			BD.update_balance(Is,bn+summa_pay)
			BD.close()
			bot.send_message(Is, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n–í—ã –ø—Ä–∏–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –Ω–∞ –≤—ã–≤–æ–¥!\n–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É!", reply_markup=keyboards)


		elif call.data == "nalogs_mamonts":
			Is = (call.message.text).split("Telegram ID:")[1].split("\n")[0].replace(" ","")
			summa_pay = (call.message.text).split("–°—É–º–º–∞:")[1].split("\n")[0].replace(" ","")
			summa_pay = float(summa_pay)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = call.message.text + "\n\n" + "üê£ –û—Ç–ø—Ä–∞–≤–∏–ª –º–∞–º–Ω–æ—Ç–∞ –Ω–∞ –Ω–∞–ª–æ–≥!",parse_mode="HTML",reply_markup=None)
			keyboards = types.InlineKeyboardMarkup()
			link = types.InlineKeyboardButton(text="üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=TP_mamonts)
			keyboards.add(link)
			BD = SQLt()
			bn = BD.getbalance(Is)
			BD.update_balance(Is,bn+summa_pay)
			BD.close()
			bot.send_message(Is, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–∞–ª–æ–≥!\n–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É!", reply_markup=keyboards)


		elif call.data == "naxuy_mamonts":
			Is = (call.message.text).split("Telegram ID:")[1].split("\n")[0].replace(" ","")
			summa_pay = (call.message.text).split("–°—É–º–º–∞:")[1].split("\n")[0].replace(" ","")
			summa_pay = float(summa_pay)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = call.message.text + "\n\n" + "üê£ –ú–∞–º–æ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ª–∞–Ω –Ω–∞—Ö—É–π!",parse_mode="HTML",reply_markup=None)
			keyboards = types.InlineKeyboardMarkup()
			link = types.InlineKeyboardButton(text="...", callback_data='naxuy')
			keyboards.add(link)
			BD = SQLt()
			bn = BD.getbalance(Is)
			BD.update_balance(Is,bn+summa_pay)
			BD.close()
			bot.send_message(Is, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n–í—ã –±—ã–ª–∏ –ø–æ—Å–ª–∞–Ω—ã –Ω–∞—Ö—É–π!", reply_markup=keyboards)


		elif call.data == "scam_mamonts":
			Is = (call.message.text).split("Telegram ID:")[1].split("\n")[0].replace(" ","")
			summa_pay = (call.message.text).split("–°—É–º–º–∞:")[1].split("\n")[0].replace(" ","")
			summa_pay = float(summa_pay)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = call.message.text + "\n\n" + "üê£ –ú–∞–º–æ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–∫–∞–º!",parse_mode="HTML",reply_markup=None)
			keyboards = types.InlineKeyboardMarkup()
			link = types.InlineKeyboardButton(text="üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=TP_mamonts)
			keyboards.add(link)
			BD = SQLt()
			bn = BD.getbalance(Is)
			BD.update_balance(Is,bn+summa_pay)
			BD.close()
			bot.send_message(Is, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n–í—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç–µ—Å—å –≤ –º–æ—à–µ–Ω–Ω–µ—á–µ—Å—Ç–≤–µ!\n–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=keyboards)


		elif call.data == "otmens_mamonts":
			Is = (call.message.text).split("Telegram ID:")[1].split("\n")[0].replace(" ","")
			summa_pay = (call.message.text).split("–°—É–º–º–∞:")[1].split("\n")[0].replace(" ","")
			summa_pay = float(summa_pay)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = call.message.text + "\n\n" + "üê£ –ú–∞–º–æ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–∫–∞–º!",parse_mode="HTML",reply_markup=None)
			keyboards = types.InlineKeyboardMarkup()
			link = types.InlineKeyboardButton(text="üíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=TP_mamonts)
			keyboards.add(link)
			BD = SQLt()
			bn = BD.getbalance(Is)
			BD.update_balance(Is,bn+summa_pay)
			BD.close()
			bot.send_message(Is, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.", reply_markup=keyboards)







		elif call.data == "balance_info":
			ids123 = int(call.message.text.split("ID:")[1].split("\n")[0].replace(" ",""))
			msg = bot.send_message(call.message.chat.id,"–ù–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å? (\"+500\" –∏–ª–∏ \"-500\")")
			BD = SQLt()
			bot.register_next_step_handler(msg,popolnenie_info)
		elif call.data == "update_tp":
			msg = bot.send_message(chat_id=call.message.chat.id, text=f"–ù–∞–ø–∏—à–∏—Ç–µ id –Ω–æ–≤–æ–π –¢–ü")
			bot.register_next_step_handler(msg,update_tp)

		elif call.data == "freze_info":
			ids123 = int(call.message.text.split("ID:")[1].split("\n")[0].replace(" ",""))
			ID1 = "ID: " + str(ids123)

			BD = SQLt()
			statwusername1 = BD.info_all_user(str(ids123))


			BD.zreezy([1,0][int(statwusername1[7])], int(ids123))


			USER1 =  "üë§ –ú–∞–º–æ–Ω—Ç @" + str(statwusername1[3])
			status1 =  "üìä –°—Ç–∞—Ç—É—Å: " +  str(statwusername1[5])
			balanse1 =  "üí∞ –ë–∞–ª–∞–Ω—Å: " + str(statwusername1[4])
			requests124 = "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: " + str(statwusername1[8])
			verifications1 =  "‚öôÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: " + ["–ù–µ—Ç ‚ùå","–î–∞ ‚úÖ"][int(statwusername1[6])]
			zamorochens =   "‚öôÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω: " +  ["–î–∞ ‚úÖ","–ù–µ—Ç ‚ùå"][int(statwusername1[7])]


			statwusername12 = BD.info_all_user(statwusername1[11])


			if int(statwusername1[11]) == 0:
				tp = "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ù–µ—Ç"
			else:
				tp = f"–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @{statwusername12[3]}"

			statwusername12 =  BD.info_all_user(statwusername1[2])
			BD.close()

			mam = "–ú–∞–º–æ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞ @" + str(statwusername12[3])


			infomam1 = types.InlineKeyboardMarkup()
			ag1 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="info_f5")
			ag2 = types.InlineKeyboardButton(text="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", callback_data="verif_info_tb")
			no3 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance_info")
			no4 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status_info")
			no5 = types.InlineKeyboardButton(text="–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å", callback_data="freze_info")
			infomam1.row(ag1)
			infomam1.row(ag2,no3)
			infomam1.row(no4,no5)

			info = str(ID1) + "\n" + str(USER1) + "\n" + str(status1) + "\n" + str(balanse1) + "\n" + str(requests124) + "\n" + str(verifications1) + "\n" + str(zamorochens) + "\n" + str(tp) + "\n" + str(mam)
			bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
			bot.send_message(chat_id=call.message.chat.id, text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /{str(ids123)}\n\n" + info,reply_markup=infomam1)

		elif call.data == "status_info":
			ids123 = int(call.message.text.split("ID:")[1].split("\n")[0].replace(" ",""))
			ID1 = "ID: " + str(ids123)

			BD = SQLt()
			statwusername1 = BD.info_all_user(str(ids123))



			BD.status_uppdate([1,0][int(bool(statwusername1[5]))], int(ids123))


			USER1 =  "üë§ –ú–∞–º–æ–Ω—Ç @" + str(statwusername1[3])
			status1 =  "üìä –°—Ç–∞—Ç—É—Å: " +  str(statwusername1[5])
			balanse1 =  "üí∞ –ë–∞–ª–∞–Ω—Å: " + str(statwusername1[4])
			requests124 = "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: " + str(statwusername1[8])
			verifications1 =  "‚öôÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: " + ["–ù–µ—Ç ‚ùå","–î–∞ ‚úÖ"][int(statwusername1[6])]
			zamorochens =   "‚öôÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω: " +  ["–ù–µ—Ç ‚ùå","–î–∞ ‚úÖ"][int(statwusername1[7])]


			statwusername12 = BD.info_all_user(statwusername1[11])


			if int(statwusername1[11]) == 0:
				tp = "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ù–ï–¢"
			else:
				tp = f"–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @{statwusername12[3]}"


			statwusername12 = BD.info_all_user(statwusername1[2])

			BD.close()

			mam = "–ú–∞–º–æ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞ @" + str(statwusername12[3])


			infomam1 = types.InlineKeyboardMarkup()
			ag1 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="info_f5")
			ag2 = types.InlineKeyboardButton(text="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", callback_data="verif_info_tb")
			no3 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance_info")
			no4 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status_info")
			no5 = types.InlineKeyboardButton(text="–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å", callback_data="freze_info")
			infomam1.row(ag1)
			infomam1.row(ag2,no3)
			infomam1.row(no4,no5)

			info = str(ID1) + "\n" + str(USER1) + "\n" + str(status1) + "\n" + str(balanse1) + "\n" + str(requests124) + "\n" + str(verifications1) + "\n" + str(zamorochens) + "\n" + str(tp) + "\n" + str(mam)
			bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
			bot.send_message(chat_id=call.message.chat.id, text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /{str(ids123)}\n\n" + info,reply_markup=infomam1)
		elif call.data == "verif_info_tb":
			ids123 = int(call.message.text.split("ID:")[1].split("\n")[0].replace(" ",""))
			ID1 = "ID: " + str(ids123)


			BD = SQLt()

			statwusername1 = BD.info_all_user(str(ids123))



			BD.verifications(int(ids123),[1,0][int(statwusername1[6])])


			USER1 =  "üë§ –ú–∞–º–æ–Ω—Ç @" + str(statwusername1[3])
			status1 =  "üìä –°—Ç–∞—Ç—É—Å: " +  str(statwusername1[5])
			balanse1 =  "üí∞ –ë–∞–ª–∞–Ω—Å: " + str(statwusername1[4])
			requests124 = "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: " + str(statwusername1[8])
			verifications1 =  "‚öôÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: " + ["–î–∞ ‚úÖ","–ù–µ—Ç ‚ùå"][int(statwusername1[6])]
			zamorochens =   "‚öôÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω: " +  ["–ù–µ—Ç ‚ùå","–î–∞ ‚úÖ"][int(statwusername1[7])]


			statwusername12 = BD.info_all_user(statwusername1[11])


			if int(statwusername1[11]) == 0:
				tp = "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ù–ï–¢"
			else:
				tp = f"–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @{statwusername12[3]}"


			statwusername12 = BD.info_all_user(statwusername1[2])

			BD.close()

			mam = "–ú–∞–º–æ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞ @" + str(statwusername12[3])


			infomam1 = types.InlineKeyboardMarkup()
			ag1 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="info_f5")
			ag2 = types.InlineKeyboardButton(text="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", callback_data="verif_info_tb")
			no3 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance_info")
			no4 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status_info")
			no5 = types.InlineKeyboardButton(text="–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å", callback_data="freze_info")
			infomam1.row(ag1)
			infomam1.row(ag2,no3)
			infomam1.row(no4,no5)

			info = str(ID1) + "\n" + str(USER1) + "\n" + str(status1) + "\n" + str(balanse1) + "\n" + str(requests124) + "\n" + str(verifications1) + "\n" + str(zamorochens) + "\n" + str(tp) + "\n" + str(mam)
			bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
			bot.send_message(chat_id=call.message.chat.id, text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /{str(ids123)}\n\n" + info,reply_markup=infomam1)


		elif call.data == "info_f5":
			ids123 = int(call.message.text.split("ID:")[1].split("\n")[0].replace(" ",""))

			ID1 = "ID: " + str(ids123)

			BD = SQLt()


			statwusername1 = BD.info_all_user(str(ids123))



			USER1 =  "üë§ –ú–∞–º–æ–Ω—Ç @" + str(statwusername1[3])
			status1 =  "üìä –°—Ç–∞—Ç—É—Å: " +  str(statwusername1[5])
			balanse1 =  "üí∞ –ë–∞–ª–∞–Ω—Å: " + str(statwusername1[4])
			requests124 = "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: " + str(statwusername1[8])
			verifications1 =  "‚öôÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: " + ["–ù–µ—Ç ‚ùå","–î–∞ ‚úÖ"][int(statwusername1[6])]
			zamorochens =   "‚öôÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω: " +  ["–ù–µ—Ç ‚ùå","–î–∞ ‚úÖ"][int(statwusername1[7])]


			statwusername12 = BD.info_all_user(statwusername1[11])


			if int(statwusername1[11]) == 0:
				tp = "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ù–µ—Ç"
			else:
				tp = f"–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @{statwusername12[3]}"


			statwusername12 = BD.info_all_user(statwusername1[2])

			BD.close()

			mam = "–ú–∞–º–æ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞ @" + str(statwusername12[3])


			infomam1 = types.InlineKeyboardMarkup()
			ag1 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="info_f5")
			ag2 = types.InlineKeyboardButton(text="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", callback_data="verif_info_tb")
			no3 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance_info")
			no4 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status_info")
			no5 = types.InlineKeyboardButton(text="–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å", callback_data="freze_info")
			infomam1.row(ag1)
			infomam1.row(ag2,no3)
			infomam1.row(no4,no5)

			info = str(ID1) + "\n" + str(USER1) + "\n" + str(status1) + "\n" + str(balanse1) + "\n" + str(requests124) + "\n" + str(verifications1) + "\n" + str(zamorochens) + "\n" + str(tp) + "\n" + str(mam)
			bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
			bot.send_message(chat_id=call.message.chat.id, text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /{str(ids123)}\n\n" + info,reply_markup=infomam1)


		elif call.data == "oplata_mamonts":
			Is = (call.message.text).split("Telegram ID:")[1].split("\n")[0].replace(" ","")
			print(Is)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = call.message.text + "\n\n" + " –û–¥–æ–±—Ä–µ–Ω–æ!",parse_mode="Markdown",reply_markup=None)

			bot.send_message(Is,"<strong>‚úÖ –í–∞–º –æ–¥–æ–±—Ä–∏–ª–∏ –≤—ã–≤–æ–¥!\n\nüì≤ –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.\nüí≥ –ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.</strong>", parse_mode='HTML')

		elif call.data == "agreee":
			BD = SQLt()
			BD.update_tp((call.message.text).split(":ID")[0].split("ID:")[1].split(":")[0],(call.message.text).split(":ID")[0].split("ID:")[1].split(":")[1])
			BD.close()
			bot.send_message((call.message.text).split(":ID")[0].split("ID:")[1].split(":")[1],f"–í–∞—à—É –ø–æ–º–æ—â—å –ø—Ä–∏–Ω—è–ª: {call.message.user}")
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = f"–í–∞—à–µ–≥–æ –º–∞–º–æ–Ω—Ç–∞ –∑–∞–±—Ä–∞–ª–∏")


		elif call.data == "notagree":
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–Ω–æ!")
			BD = SQLt()
			BD.ignor_tp_help((call.message.text).split(":ID")[0].split("ID:")[1].split(":")[0],(call.message.text).split(":ID")[0].split("ID:")[1].split(":")[1])
			BD.close()


		elif call.data == "support_f5_supp":
			BD = SQLt()

			wstat = BD.support_select()

			ignor = BD.support_select_usrs(call.message.chat.id)
			lst_ignor_otkaz = []
			if len(ignor) > 0:
				lst_ignor_otkaz = [x[0] for x in ignor]


			ignor = BD.support_select_usrs(call.message.chat.id,"ignors_support")
			lst_ignor = []
			if len(ignor) > 0:
				lst_ignor = [x[0] for x in ignor]


			print("ignor_support",lst_ignor)

			arrstatw = []

			counts_mamonts = 0

			for i in wstat:
				try:


					statwname = BD.get_name(i[0])

					statwusername = BD.get_username(i[0])



					counts_mamonts += 1

					if i[0] not in lst_ignor and i[0] not in lst_ignor_otkaz:
						strw = f"[/help_{i[0]}] - (/{i[0]}) - @{statwusername} - {formatted_currency(BD,BD.getbalance(i[0]),i[0],BD.get_user_curses(i[0]))} - {BD.getstatus(i[0])}\n"
						arrstatw.append(strw)
				except:
					pass


			spisokmamont = f"ü•∞ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–º–æ–Ω—Ç–æ–≤:\n\n"

			wrk_mamonts = types.InlineKeyboardMarkup()
			wrk201 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="support_f5_supp")
			wrk2021 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mamont_nazad_supports")

			wrk_mamonts.add(wrk201)
			wrk_mamonts.add(wrk2021)

			if(len(arrstatw)>50):
				newarrstatw = [arrstatw[d:d+50] for d in range(0, len(arrstatw), 50)]
				for m1 in newarrstatw:
					for m2 in m1:

						spisokmamont+=m2

					bot.delete_message(call.from_user.id, call.message.message_id)
					bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
					break




			else:
				for i in arrstatw:
					spisokmamont += i
				bot.delete_message(call.from_user.id, call.message.message_id)
				bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
			BD.close()


		elif call.data == "mamonts_all":
			BD = SQLt()

			wstat = BD.support_select()

			ignor = BD.support_select_usrs(call.message.chat.id)
			lst_ignor_otkaz = []
			if len(ignor) > 0:
				lst_ignor_otkaz = [x[0] for x in ignor]



			ignor = BD.support_select_usrs(call.message.chat.id,"ignors_support")
			lst_ignor = []
			if len(ignor) > 0:
				lst_ignor = [x[0] for x in ignor]


			print("ignor_support",lst_ignor)

			arrstatw = []

			counts_mamonts = 0

			for i in wstat:
				try:

					statwname = BD.get_name(i[0])



					statwusername = BD.get_username(i[0])





					counts_mamonts += 1

					if i[0] not in lst_ignor and i[0] not in lst_ignor_otkaz:
						strw = f"[/help_{i[0]}] - (/{i[0]}) - @{statwusername} - {formatted_currency(BD,BD.getbalance(i[0]),i[0],BD.get_user_curses(i[0]))} - {BD.getstatus(i[0])}\n"
						arrstatw.append(strw)
				except:
					pass


			spisokmamont = f"ü•∞ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–º–æ–Ω—Ç–æ–≤:\n\n"

			wrk_mamonts = types.InlineKeyboardMarkup()
			wrk201 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="support_f5_supp")
			wrk2021 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mamont_nazad_supports")

			wrk_mamonts.add(wrk201)
			wrk_mamonts.add(wrk2021)

			if(len(arrstatw)>50):
				newarrstatw = [arrstatw[d:d+50] for d in range(0, len(arrstatw), 50)]
				for m1 in newarrstatw:
					for m2 in m1:

						spisokmamont+=m2

					bot.delete_message(call.from_user.id, call.message.message_id)
					bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
					break




			else:
				for i in arrstatw:
					spisokmamont += i
				bot.delete_message(call.from_user.id, call.message.message_id)
				bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
			BD.close()



		elif call.data == "mamont_nazad_supports":
			sepuut = types.InlineKeyboardMarkup()
			sepuut1 = types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—ã–µ –º–∞–º–æ–Ω—Ç—ã", callback_data="mamonts_agree")
			sepuut2 = types.InlineKeyboardButton(text="–û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –º–∞–º–æ–Ω—Ç–æ–≤", callback_data="mamonts_all")
			sepuut.add(sepuut1,sepuut2)
			bot.edit_message_text(
				chat_id=call.message.chat.id,
				message_id=call.message.message_id,
				text="You support!",
				reply_markup=sepuut)
		elif call.data == "mamont_requests":
			BD = SQLt()
			bot.send_message(call.message.chat.id,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ <ID:QIWI>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 666:880005553535 ",reply_markup=cancel())
			bot.register_next_step_handler(call.message,BD.update_requisites1)


		elif call.data == "support_f5":
			BD = SQLt()

			wstat = BD.support_select(call.message.chat.id)


			ignor = BD.support_select_usrs(call.message.chat.id,"ignors_support")
			lst_ignor = []
			if len(ignor) > 0:
				lst_ignor = [x[0] for x in ignor]


			print("ignor_support",lst_ignor)

			arrstatw = []

			counts_mamonts = 0

			for i in wstat:
				try:

					statwname = BD.get_name(i[0])

					statwusername = BD.get_username(i[0])



					counts_mamonts += 1

					if i[0] not in lst_ignor:
						strw = f"[–¢–ü] - (/{i[0]}) - @{statwusername} - {formatted_currency(BD,BD.getbalance(i[0]),i[0],BD.get_user_curses(i[0]))} - {BD.getstatus(i[0])}\n"
						arrstatw.append(strw)
				except:
					pass


			spisokmamont = f"ü•∞ –í—ã –¢–ü –¥–ª—è {counts_mamonts} –º–∞–º–æ–Ω—Ç–æ–≤!\nü•∞ –í—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç–µ: {len(lst_ignor)}\n\n"

			wrk_mamonts = types.InlineKeyboardMarkup()
			wrk201 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="support_f5")
			inline_9 = types.InlineKeyboardButton(text = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", callback_data = 'VER_MAMONT')
			wrk14 =  types.InlineKeyboardButton(text="üëë –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="statusreplace")
			wrk13 = types.InlineKeyboardButton(text="üí≤ –ò–∑–º–µ–Ω–∏—Ç –±–∞–ª–∞–Ω—Å", callback_data="admbalance")
			wrk1199 = types.InlineKeyboardButton(text = "ü•∂ –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data = 'freeze_user')
			wrk11 = types.InlineKeyboardButton(text="‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data="mamont_delete_supp")
			wrt_124 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="mamont_requests")
			wrk2021 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mamont_nazad_supports")

			wrk_mamonts.add(wrk201)
			wrk_mamonts.add(inline_9)
			wrk_mamonts.add(wrk13,wrk14)
			wrk_mamonts.add(wrk11,wrk1199)
			wrk_mamonts.add(wrt_124)
			wrk_mamonts.add(wrk2021)

			if(len(arrstatw)>50):
				newarrstatw = [arrstatw[d:d+50] for d in range(0, len(arrstatw), 50)]
				for m1 in newarrstatw:
					for m2 in m1:

						spisokmamont+=m2

					bot.delete_message(call.from_user.id, call.message.message_id)
					bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
					break
			else:
				for i in arrstatw:
					spisokmamont += i
				bot.delete_message(call.from_user.id, call.message.message_id)
				bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
			BD.close()

		elif call.data == "mamonts_agree":
			BD = SQLt()

			countwstat = BD.support_counts(call.message.chat.id)

			if countwstat == 0:
				wrk_mamonts_mini = types.InlineKeyboardMarkup()
				wrk2021 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mamont_nazad_supports")
				wrk_mamonts_mini.add(wrk2021)
				bot.delete_message(call.from_user.id, call.message.message_id)
				bot.send_message(call.message.chat.id, f"–£ —Ç–µ–±—è –Ω–µ—Ç –º–∞–º–æ–Ω—Ç–æ–≤",reply_markup=wrk_mamonts_mini)
			else:


				wstat = BD.support_select(call.message.chat.id)

				ignor = BD.support_select_usrs(call.message.chat.id,"ignors_support")
				lst_ignor = []
				if len(ignor) > 0:
					lst_ignor = [x[0] for x in ignor]

				print("ignor_support",lst_ignor)

				arrstatw = []

				counts_mamonts = 0

				for i in wstat:
					try:

						statwname = BD.get_name(i[0])

						statwusername = BD.get_username(i[0])



						counts_mamonts += 1

						if i[0] not in lst_ignor:
							strw = f"[–¢–ü] - ({i[0]}) - @{statwusername} - {formatted_currency(BD,BD.getbalance(i[0]),i[0],BD.get_user_curses(i[0]))} - {BD.getstatus(i[0])}\n"
							arrstatw.append(strw)
					except:
						pass


				spisokmamont = f"ü•∞ –í—ã –¢–ü –¥–ª—è {counts_mamonts} –º–∞–º–æ–Ω—Ç–æ–≤!\nü•∞ –í—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç–µ: {len(lst_ignor)}\n\n"

				wrk_mamonts = types.InlineKeyboardMarkup()
				wrk201 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="support_f5")
				inline_9 = types.InlineKeyboardButton(text = "‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", callback_data = 'VER_MAMONT')
				wrk14 =  types.InlineKeyboardButton(text="üëë –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="statusreplace")
				wrk13 = types.InlineKeyboardButton(text="üí≤ –ò–∑–º–µ–Ω–∏—Ç –±–∞–ª–∞–Ω—Å", callback_data="admbalance")
				wrk1199 = types.InlineKeyboardButton(text = "ü•∂ –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data = 'freeze_user')
				wrk11 = types.InlineKeyboardButton(text="‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data="mamont_delete_supp")
				wrt_124 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="mamont_requests")
				wrk2021 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mamont_nazad_supports")

				wrk_mamonts.add(wrk201)
				wrk_mamonts.add(inline_9)
				wrk_mamonts.add(wrk13,wrk14)
				wrk_mamonts.add(wrk11,wrk1199)
				wrk_mamonts.add(wrt_124)
				wrk_mamonts.add(wrk2021)

				if(len(arrstatw)>50):
					newarrstatw = [arrstatw[d:d+50] for d in range(0, len(arrstatw), 50)]
					for m1 in newarrstatw:
						for m2 in m1:

							spisokmamont+=m2

						bot.delete_message(call.from_user.id, call.message.message_id)
						bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
						break




				else:
					for i in arrstatw:
						spisokmamont += i
					bot.delete_message(call.from_user.id, call.message.message_id)
					bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
				BD.close()

		elif call.data == "cardcard" and not(freeze_users):
			bot.send_message(call.message.chat.id,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã",reply_markup=cancel())
			bot.register_next_step_handler(call.message,replacecard)
		elif call.data == "qiwi" and not(freeze_users):
			bot.send_message(call.message.chat.id,"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∏ P2P —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á\n\n –í –≤–æ—Ä–º–∞—Ç–µ (–ù–æ–º–µ—Ä –±–µ–∑ +:P2P –∫–ª—é—á)",reply_markup=cancel())
			bot.register_next_step_handler(call.message,replaceqiwi)
		elif call.data == "send" and not(freeze_users):

			bot.send_message(call.message.chat.id,"üì© –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—ã–ª–∫–∏",reply_markup=cancel())
			bot.register_next_step_handler(call.message,rass)
		elif call.data == "stat" and not(freeze_users):
			BD = SQLt()
			number = BD.count_select()
			BD.close()

			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ - {number}")
			bot.send_message(call.message.chat.id,"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",reply_markup=adminpanel())
		elif call.data == "prov" and not(freeze_users):
			BD = SQLt()
			user_id = call.message.chat.id
			QIWI_ACCESS_KEY = BD.token_qiwi()
			p2p = QiwiP2P(auth_key=QIWI_ACCESS_KEY)
			result = BD.status_from_oplata(user_id)
			skolko = result[3]
			comment = result[1]
			build_id = result[2]
			paystatus = p2p.check(build_id).status

			if paystatus == "PAID":

				try:


					balancenow = BD.getbalance(call.message.chat.id)


					wk = BD.worker_code(user_id)


					workerusername = BD.get_username(wk)

					workername = BD.get_name(wk)

					mamont = BD.get_name(call.message.chat.id)

					dolya = BD.get_p()



					bot.send_photo(vyplaty,f'{config.photos8}', caption= f"ü¶ã <strong>–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</strong>\nüìä –°–µ—Ä–≤–∏—Å: <strong>–¢—Ä–µ–π–¥–∏–Ω–≥</strong>\n\nüë§ <strong>–í–æ—Ä–∫–µ—Ä:</strong> @{workerusername}\n\n‚ö°Ô∏è <strong>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {skolko} RUB\nüí∏ <strong>–î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞:</strong> {round((dolya*skolko)/100)} RUB",parse_mode='HTML')
					bot.send_message(admin,f"[{call.message.chat.first_name}](tg://user?id={call.message.chat.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {skolko}RUB",parse_mode='Markdown')
					bot.send_message(wk,f"–í–∞—à –º–∞–º–æ–Ω—Ç: [{call.message.chat.first_name}](tg://user?id={call.message.chat.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ *{skolko}* RUB\n\n–¢–≤–æ—è –¥–æ–ª—è *{round((dolya*skolko)/100)}*",parse_mode='Markdown')
					bot.send_message(call.message.chat.id,f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.\n\n–ë–∞–ª–∞–Ω—Å {balancenow+skolko} RUB",reply_markup=user())


					#skolko = BD.get_numn1(call.message.chat.id)

					BD.update_balance(call.message.chat.id,balancenow+skolko)

					BD.delete_oplata(call.message.chat.id)

					BD.close()
				except:
					bot.send_message(call.message.chat.id,"‚ö†Ô∏è–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏‚ö†Ô∏è\n\n–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\"")
					BD.close()
					pass



			else:
				bot.send_message(call.message.chat.id,"‚ö†Ô∏è–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏‚ö†Ô∏è\n\n–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\"")



		elif call.data == 'prov2' and not(freeze_users):
			try:
				BD = SQLt()

				sa = BD.get_numn(call.message.chat.id)

				k = types.InlineKeyboardMarkup()
				k1 = types.InlineKeyboardButton(text="–í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data="vyplata")
				k2 = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="otklon")

				k.add(k1)
				k.add(k2)
				user_id_pod = BD.podderjka_NN(call.message.chat.id)[0][0]
				poderjka = f"‚úÖ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —á–µ–∫ –≤ —á–∞—Ç [—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏](tg://user?id={user_id_pod} ‚úÖ"
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text =poderjka,parse_mode="Markdown")
				bot.send_message(call.message.chat.id, f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=user())

				bot.send_message(admin, f"ID –ø–ª–∞—Ç–µ–∂–∞ `{call.message.chat.id}`\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.first_name} –ó–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞.\n–°—É–º–º–∞ {sa}",reply_markup=k,parse_mode='Markdown')
				bot.send_message(admins[1], f"ID –ø–ª–∞—Ç–µ–∂–∞ `{call.message.chat.id}`\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.first_name} –ó–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞.\n–°—É–º–º–∞ {sa}",reply_markup=k,parse_mode='Markdown')
				BD.close()
			except Exception as e:
				BD.close()
				raise

		elif call.data ==   "vyplata" and not(freeze_users):
			bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –ø–ª–∞—Ç–µ–∂–∞",reply_markup=cancel())
			bot.register_next_step_handler(call.message, prinyatieplateja2)

		elif call.data ==   "otklon" and not(freeze_users):
			bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ –ø–ª–∞—Ç–µ–∂–∞ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)",reply_markup=cancel())
			bot.register_next_step_handler(call.message, otklonplateja)
		elif call.data == "zaplatit" and not(freeze_users):


			bot.send_message(call.message.chat.id,"–ù–∞–ø–∏—à–∏—Ç–µ id –º–∞–º–æ–Ω—Ç–∞ (—Ü–∏—Ñ—Ä–∞–º–∏)",reply_markup=cancel())
			bot.register_next_step_handler(call.message, prinyatieplateja)

		elif call.data == "procent" and not(freeze_users):
			bot.send_message(call.message.chat.id,"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤",reply_markup=cancel())
			bot.register_next_step_handler(call.message,replaceprocent)

		elif call.data == "cancel" and not(freeze_users):
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text ="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
			bot.send_message(call.message.chat.id,"üëª",reply_markup=user())
		elif call.data == "smsm" and not(freeze_users):
			bot.send_message(call.message.chat.id,"üÜî –û—Ç–ø—Ä–∞–≤—å ID –º–∞–º–æ–Ω—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n–ù–∞–ø—Ä–∏–º–µ—Ä - 123456789:–ë–∞–Ω–∞–Ω—ã –±—É–¥–µ—à—å?",reply_markup=cancel())
			bot.register_next_step_handler(call.message,mamontmessage)
		elif call.data == "rassw" and not(freeze_users):
			bot.send_message(call.message.chat.id,"üÜî –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",reply_markup=cancel())
			bot.register_next_step_handler(call.message,rassmamontmessage)
		elif call.data == "ref" and not(freeze_users):
			reflink=f"http://t.me/{bot_username}?start={call.message.chat.id}"
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = reflink)
			bot.send_message(call.message.chat.id,f"–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ @{TP_mamontsTP}\n\n–¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ - http://t.me/{bot_username}?start={message.chat.id}\n\nQIWI —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{numbers}\n–ö–∞—Ä—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{cards}",reply_markup=workerpanel(), parse_mode="HTML")
		elif call.data == "spisok" and not(freeze_users):
			BD = SQLt()

			countwstat = BD.count_boss(call.message.chat.id)


			if countwstat == 0:
				wrk_mamonts_mini = types.InlineKeyboardMarkup()
				wrk201 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="mamont_f5")
				wrk911 = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="infworker1")
				wrk2021 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mamont_nazad")

				wrk_mamonts_mini.add(wrk201,wrk911)
				wrk_mamonts_mini.add(wrk2021)

				bot.delete_message(call.from_user.id, call.message.message_id)

				bot.send_message(call.message.chat.id, f"–£ —Ç–µ–±—è –Ω–µ—Ç –º–∞–º–æ–Ω—Ç–æ–≤",reply_markup=wrk_mamonts_mini)
				BD.close()
			else:

				wstat = BD.get_id_for_boss(call.message.chat.id)

				ignor = BD.get_mamonts(call.message.chat.id)
				lst_ignor = []
				if len(ignor) > 0:
					lst_ignor = [x[0] for x in ignor]


				print(lst_ignor)

				countstrw = len(wstat)//50
				arrstatw = []

				counts_mamonts = 0

				for i in wstat:
					try:

						statwname = BD.get_name(i[0])

						statwusername = BD.get_username(i[0])

						TPs = BD.select_tp(i[0])

						counts_mamonts += 1

						if i[0] not in lst_ignor:
							tph = ["","[TP]-"][int(bool(TPs))]
							strw = f"{tph}(/{i[0]}) - @{statwusername} - {formatted_currency(BD,BD.getbalance(i[0]),i[0],BD.get_user_curses(i[0]))} - {BD.getstatus(i[0])}\n"
							arrstatw.append(strw)

					except:
						pass
				# bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = "–£–¥–∞—á–Ω–æ–≥–æ –≤–æ—Ä–∫–∞")

				spisokmamont = f"ü¶£ –¢–≤–æ–∏ –ú–∞–º–æ–Ω—Ç—ã - {counts_mamonts}\n‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ –º–∞–º–æ–Ω—Ç—ã - {len(lst_ignor)}\n(ID)-@username-–±–∞–ª–∞–Ω—Å-—Å—Ç–∞—Ç—É—Å\n\n"

				wrk_mamonts = types.InlineKeyboardMarkup()
				wrk201 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="mamont_f5")
				wrk11 = types.InlineKeyboardButton(text="‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data="mamont_delete")
				wrk2021 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mamont_nazad")
				wrk5 = types.InlineKeyboardButton(text="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç—É", callback_data="smsm")

				wrk_mamonts.add(wrk201,wrk11,wrk5)
				wrk_mamonts.add(wrk2021)

				if(len(arrstatw)>50):
					newarrstatw = [arrstatw[d:d+50] for d in range(0, len(arrstatw), 50)]
					for m1 in newarrstatw:
						for m2 in m1:

							spisokmamont+=m2

						bot.delete_message(call.from_user.id, call.message.message_id)
						bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
						break




				else:
					for i in arrstatw:
						spisokmamont += i
					bot.delete_message(call.from_user.id, call.message.message_id)
					bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
				BD.close()

		elif call.data == "prom" and not(freeze_users):
			bot.send_message(call.message.chat.id, "üéÅ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:")
			bot.register_next_step_handler(call.message, create_promo)

		elif call.data == "mamont_f5" and not(freeze_users):
			BD = SQLt()
			countwstat = BD.count_boss(call.message.chat.id)


			if countwstat == 0:
				wrk_mamonts_mini = types.InlineKeyboardMarkup()
				wrk201 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="mamont_f5")
				wrk911 = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="infworker1")
				wrk2021 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mamont_nazad")

				wrk_mamonts_mini.add(wrk201,wrk911)
				wrk_mamonts_mini.add(wrk2021)

				bot.delete_message(call.from_user.id, call.message.message_id)

				bot.send_message(call.message.chat.id, f"–£ —Ç–µ–±—è –Ω–µ—Ç –º–∞–º–æ–Ω—Ç–æ–≤",reply_markup=wrk_mamonts_mini)
				BD.close()
			else:

				wstat = BD.get_id_for_boss(call.message.chat.id)

				ignor = BD.get_mamonts(call.message.chat.id)
				lst_ignor = []
				if len(ignor) > 0:
					lst_ignor = [x[0] for x in ignor]


				print(lst_ignor)

				countstrw = len(wstat)//50
				arrstatw = []

				counts_mamonts = 0

				for i in wstat:
					try:

						statwname = BD.get_name(i[0])

						statwusername = BD.get_username(i[0])

						TPs = BD.select_tp(i[0])


						counts_mamonts += 1

						if i[0] not in lst_ignor:
							tph = ["","[TP]-"][int(bool(TPs))]
							strw = f"{tph}(/{i[0]}) - @{statwusername} - {first_name} - {formatted_currency(BD,BD.getbalance(i[0]),i[0],BD.get_user_curses(i[0]))} - {BD.getstatus(i[0])}\n"
							arrstatw.append(strw)
					except:
						pass


				spisokmamont = f"ü¶£ –¢–≤–æ–∏ –ú–∞–º–æ–Ω—Ç—ã - {counts_mamonts}\n‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ –º–∞–º–æ–Ω—Ç—ã - {len(lst_ignor)}\n(ID)-@username-–±–∞–ª–∞–Ω—Å-—Å—Ç–∞—Ç—É—Å\n"

				wrk_mamonts = types.InlineKeyboardMarkup()
				wrk201 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="mamont_f5")
				wrk11 = types.InlineKeyboardButton(text="‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞", callback_data="mamont_delete")
				wrk2021 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mamont_nazad")
				wrk5 = types.InlineKeyboardButton(text="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç—É", callback_data="smsm")

				wrk_mamonts.add(wrk201,wrk11,wrk5)
				wrk_mamonts.add(wrk2021)

				if(len(arrstatw)>50):
					newarrstatw = [arrstatw[d:d+50] for d in range(0, len(arrstatw), 50)]
					for m1 in newarrstatw:
						for m2 in m1:

							spisokmamont+=m2

						bot.delete_message(call.from_user.id, call.message.message_id)
						bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
						break




				else:
					for i in arrstatw:
						spisokmamont += i
					bot.delete_message(call.from_user.id, call.message.message_id)
					bot.send_message(chat_id=call.message.chat.id,text =  f"{spisokmamont}",reply_markup=wrk_mamonts)
				BD.close()

		elif call.data == "mamont_delete_supp" and not(freeze_users):
			msg = bot.send_message(chat_id=call.message.chat.id,text =  f"–ù–∞–ø–∏—à–∏—Ç–µ id –º–∞–º–æ–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ")
			bot.register_next_step_handler(msg, mamont_delete_def_supports)

		elif call.data == "mamont_delete" and not(freeze_users):
			msg = bot.send_message(chat_id=call.message.chat.id,text =  f"–ù–∞–ø–∏—à–∏—Ç–µ id –º–∞–º–æ–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ")
			bot.register_next_step_handler(msg, mamont_delete_def)

		elif call.data == "mamont_nazad" and not(freeze_users):
			bot.delete_message(call.from_user.id, call.message.message_id)
			bot.send_message(call.message.chat.id,f"–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ @{TP_mamontsTP}\n\n–¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ - http://t.me{bot_username}?start={call.message.chat.id}\n\nQIWI —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{numbers}\n–ö–∞—Ä—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{cards}",reply_markup=workerpanel(), parse_mode="HTML")

		elif call.data == "infworker" and not(freeze_users):
			info_mini = types.InlineKeyboardMarkup()
			wrk2021 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mamont_nazad")
			info_mini.add(wrk2021)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = workerinfo,reply_markup=info_mini)

		elif call.data == "infworker1" and not(freeze_users):
			info_mini = types.InlineKeyboardMarkup()
			wrk2021 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="mamont_nazad")
			info_mini.add(wrk2021)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = workerinfo,reply_markup=info_mini)

		elif (call.data == "projekt"):
			bot.send_photo(call.from_user.id,
								f'{config.photos6}', caption= f"ü¶ã <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ: {nameteam}\n\nüíÜüèª‚Äç‚ôÄÔ∏è –¢–° - @{adminssss}\nüë©üèª‚Äç –°–∞–ø–ø–æ—Ä—Ç - @{supports}\nüíµ –í—ã–ø–ª–∞—Ç—ã - @{playpass}\nüí≥ –î—Ä–æ–ø - @{dropos}\n\n–í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞: {projes}\n‚Äî –û–ø–ª–∞—Ç–∞: {prochent}%\n‚Äî –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É: {prochent2}\n‚Äî –û–ø–ª–∞—Ç–∞ –∑–∞ –∏–∫—Å—ã: {prochent3}%\n\n‚úîÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã WORK\n{strana1}\n{strana2}\n{strana3}\n{strana4}\n{strana5}\n{strana6}</strong>",reply_markup= projekt_wan(), parse_mode="HTML")

		elif call.data == "statusreplace":
			bot.send_message(call.message.chat.id,"üÜî –û—Ç–ø—Ä–∞–≤—å ID –º–∞–º–æ–Ω—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å\n\n–ù–∞–ø—Ä–∏–º–µ—Ä - 123456789:0",reply_markup=cancel())
			bot.register_next_step_handler(call.message,workstatus)
		elif call.data == "admbalance":
			bot.send_message(call.message.chat.id,"üÜî –û—Ç–ø—Ä–∞–≤—å ID –º–∞–º–æ–Ω—Ç–∞ –∏ –ë–∞–ª–∞–Ω—Å\n\n–ù–∞–ø—Ä–∏–º–µ—Ä - 123456789:1000",reply_markup=cancel())
			bot.register_next_step_handler(call.message,dobavleniebalance)
		elif call.data == "cb_popolnenie" and not(freeze_users):
			bot.delete_message(call.from_user.id, call.message.message_id)
			message = bot.send_photo(call.from_user.id,
										f'{config.photos3}', caption= f"‚úÖ <strong>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {minimalka} RUB –¥–æ 50000 RUB</strong>",reply_markup=cancel(), parse_mode="HTML")
			bot.register_next_step_handler(call.message, popolni)
		elif call.data == "cb_vivod" and not(freeze_users):
			bot.delete_message(call.from_user.id, call.message.message_id)
			BD = SQLt()
			bot.send_message(call.message.chat.id,f"‚úÖ <strong>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.\nüí∞ –ù–∞ –±–∞–ª–∞–Ω—Å–µ: {formatted_currency(BD,BD.getbalance(call.message.chat.id),call.message.chat.id,BD.get_user_curses(call.message.chat.id))}</strong>",reply_markup=cancel(), parse_mode="HTML")
			BD.close()
			bot.register_next_step_handler(call.message,vyvod)
		elif call.data == "cb_otziv" and not(freeze_users):
			ot = types.InlineKeyboardMarkup()
			ot1 = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–∑—ã–≤–∞–º", callback_data="site", url=otzyvy)
			ot.add(ot1)
			bot.delete_message(call.from_user.id, call.message.message_id)
			bot.send_message(call.message.chat.id,textotzyv,reply_markup=ot)
		# elif call.data == "balanceqiwi" and not(freeze_users):
		# 	bot.delete_message(call.from_user.id, call.message.message_id)
		# 	bot.send_message(call.message.chat.id,f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {minimalka} RUB:\n\n(–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ 1000 RUB, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äò1000‚Äô, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫",reply_markup=cancel())
		# 	bot.register_next_step_handler(call.message, popolni)
		elif call.data == "balancepromo" and not(freeze_users):
			bot.delete_message(call.from_user.id, call.message.message_id)
			bot.send_message(call.message.chat.id,"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥",reply_markup=cancel())
			bot.register_next_step_handler(call.message, promo)
		elif call.data == "refff" and not(freeze_users):
			message = bot.send_photo(call.from_user.id,
										f'{config.photos2}', caption= f"*–ö–∞–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\nüî∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –æ–¥–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.\n\nüî∏ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Å–∞–º–∏—Ö —Å–µ–±—è –ø—É—Ç–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ï—Å–ª–∏ –º—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–¥–æ–±–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –≤—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ –∫–µ—à–±—ç–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã.\n\nüî∏ –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å —Å—Ä–æ–∫, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–µ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã.*\n\n*–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:* http://t.me/{bot_username}?start={call.message.chat.id}",reply_markup= inline_kurs(), parse_mode="Markdown")
		elif call.data == "setss" and not(freeze_users):
			message = bot.send_photo(call.from_user.id,
										f'{config.photos4}', caption= f"*üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏ Bitcoin\n\n–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: üü¢ –Ω–∏–∑–∫–∞—è\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤: ‚âà 1\n–†–∞–∑–º–µ—Ä: 1.9 mB (1.4 mVB)\n–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: 2301\n\n–ö–æ–º–∏—Å—Å–∏—è –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫:\n–ú–∏–Ω–∏–º—É–º: 0.00003072 BTC / kVB\n–ú–µ–¥–∏–∞–Ω–∞: 0.00004096 BTC / kVB*",reply_markup= inline_kurs(), parse_mode="Markdown")
		# elif call.data == "balancecard" and not(freeze_users):
		# 	bot.delete_message(call.from_user.id, call.message.message_id)
		# 	bot.send_message(call.message.chat.id,f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {minimalka} RUB:\n\n(–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ 1000 RUB, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äò1000‚Äô, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫",reply_markup=cancel())
		# 	bot.register_next_step_handler(call.message, popolnicard)

		elif call.data == "otmena" and not(freeze_users):
			bot.delete_message(call.from_user.id, call.message.message_id)
			bot.send_message(call.message.chat.id,"‚Ü™Ô∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=user())
			bot.register_next_step_handler(call.message, main_message)
		elif call.data == "workerpanel":
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚öôÔ∏è', parse_mode="Markdown", reply_markup=workerpanel())

		elif (call.data == "VER_MAMONT"):
			ver_keyboard = types.InlineKeyboardMarkup(row_width = 2)
			ver_keyboard.add(types.InlineKeyboardButton('–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å', callback_data = 'ver_on'),
				types.InlineKeyboardButton('–°–Ω—è—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é', callback_data = 'ver_off'))
			print(call)
			bot.edit_message_text(
				chat_id = call.from_user.id,
				message_id = call.message.message_id,
				text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>",
				parse_mode = 'HTML',
				reply_markup = ver_keyboard)

		elif call.data == 'ver_on':
			BD = SQLt()
			message = bot.send_message(call.from_user.id, 'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *ID* –º–∞–º–æ–Ω—Ç–∞', parse_mode="Markdown")
			bot.register_next_step_handler(message, BD.ver_mamont_num)

		elif call.data == 'ver_off':
			BD = SQLt()
			message = bot.send_message(call.from_user.id, 'üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ *ID* –º–∞–º–æ–Ω—Ç–∞', parse_mode="Markdown")
			bot.register_next_step_handler(message, BD.ver_mamont_off)
		elif call.data == "freeze_user":
			keyboardd = types.InlineKeyboardMarkup(row_width = 2)
			keyboardd.add(types.InlineKeyboardButton(text = '‚ùå–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data = 'user_freeze_wor'),
				types.InlineKeyboardButton(text = '‚úÖ–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data = 'user_unfreeze_wor'))
			msg = bot.send_message(call.from_user.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤ –º–∞–º–æ–Ω—Ç–∞ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º',
				parse_mode = 'HTML',
				reply_markup = keyboardd)

		elif call.data == "user_unfreeze_wor":
			BD = SQLt()
			msg = bot.edit_message_text(
				chat_id = call.from_user.id,
				message_id = call.message.message_id,
				text = "üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>ID</b> –º–∞–º–æ–Ω—Ç–∞",
				parse_mode = 'HTML')
			bot.register_next_step_handler(msg, BD.freeze2)

		elif call.data == "user_freeze_wor":
			BD = SQLt()
			msg = bot.edit_message_text(
				chat_id = call.from_user.id,
				message_id = call.message.message_id,
				text = "üíÅüèª‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>ID</b> –º–∞–º–æ–Ω—Ç–∞",
				parse_mode = 'HTML')
			bot.register_next_step_handler(msg, BD.freeze1)






		elif call.data == 'show_req':
			BD = SQLt()
			code = BD.worker_code(call.from_user.id)
			text = BD.get_req_code(code)
			BD.close()
			bot.send_message(call.from_user.id, text, parse_mode="Markdown")

		elif call.data == 'change_mamont_support':
			BD = SQLt()
			message = bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —Å–∞–ø–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *<–∞–π–¥–∏_–º–∞–º–æ–Ω—Ç–∞>:<–∞–π–¥–∏_—Å–∞–ø–ø–æ—Ä—Ç–∞>* or *<–∞–π–¥–∏_–º–∞–º–æ–Ω—Ç–∞>::<—Ç–µ–≥_—Å–∞–ø–ø–æ—Ä—Ç–∞>*', parse_mode="Markdown")
			bot.register_next_step_handler(message, BD.mamont_change_supp)



		elif call.data == "zayvka_prinyl":
			BD = SQLt()
			k = (call.message.text).replace("\n","").replace("–í–∞—à –º–∞–º–æ–Ω—Ç –∂–µ–ª–∞–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!","").replace(" ","")
			k = k.replace("ID:","").replace("User:"," ").replace("–†–µ–∫–≤–∏–∑–∏—Ç—ã:"," ")
			ID_req,NAME_req,REQ_req = k.split()
			T_F = True
			try:
				BD.update_requisites(int(ID_req), int(REQ_req))
				bot.edit_message_text(chat_id=call.from_user.id,
					message_id=call.message.message_id,
					text=f"<b>–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!</b>",
					parse_mode='HTML',
					reply_markup=None)
				BD.close()
			except:
				bot.edit_message_text(chat_id=call.from_user.id,
					message_id=call.message.message_id,
					text=f"<b>–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n\n{ID_req}\n{NAME_req}\n{REQ_req}</b>",
					parse_mode='HTML',
					reply_markup=None)
				T_F = False
				BD.close()
				pass
			if T_F:
				bot.send_message(ID_req,"<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–º–µ–Ω—É —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!</b>",parse_mode="HTML")

		elif call.data == "zayvka_close":
			BD = SQLt()
			k = (call.message.text).replace("\n","").replace("–í–∞—à –º–∞–º–æ–Ω—Ç –∂–µ–ª–∞–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!","").replace(" ","")
			k = k.replace("ID:","").replace("User:"," ").replace("–†–µ–∫–≤–∏–∑–∏—Ç—ã:"," ")
			ID_req,NAME_req,REQ_req = k.split()
			T_F = True
			try:
				bot.edit_message_text(chat_id=call.from_user.id,
					message_id=call.message.message_id,
					text=f"<b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!</b>",
					parse_mode='HTML',
					reply_markup=None)
				BD.close()
			except:
				bot.edit_message_text(chat_id=call.from_user.id,
					message_id=call.message.message_id,
					text=f"<b>–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n\n{ID_req}\n{NAME_req}\n{REQ_req}</b>",
					parse_mode='HTML',
					reply_markup=None)
				T_F = False
				BD.close()
				pass
			if T_F:
				bot.send_message(ID_req,"<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–º–µ–Ω—É —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!</b>\n–†–µ—à–µ–Ω–∏–µ: –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ",parse_mode="HTML")

		elif call.data == 'change_currency':
			BD = SQLt()
			ver_keyboard = types.InlineKeyboardMarkup(row_width=1)
			ver_keyboard.add(
				types.InlineKeyboardButton(text='üá∫üá∏ USD', callback_data='set_currency_usd'),
				types.InlineKeyboardButton(text='üá∑üá∫ RUB', callback_data='set_currency_rub'),
				types.InlineKeyboardButton(text='üá∫üá¶ UAH', callback_data='set_currency_uah'),
				types.InlineKeyboardButton(text='üá∞üáø KZT', callback_data='set_currency_kzt'),
				types.InlineKeyboardButton(text='üáßüáæ BYN', callback_data='set_currency_byn'),
				types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='otmena')
			)
			currency = BD.get_user_curses(call.from_user.id)
			BD.close()
			bot.delete_message(call.from_user.id, call.message.message_id)
			bot.send_message(
				chat_id=call.from_user.id,
				text=f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: <b>{currency.upper()}</b>",
				parse_mode='HTML',
				reply_markup=ver_keyboard)


		elif 'set_currency' in call.data:
			BD = SQLt()
			new_currency = call.data.split('_')[-1]

			BD.update_cerses(call.from_user.id, new_currency)
			BD.close()
			bot.edit_message_text(
				chat_id=call.from_user.id,
				message_id=call.message.message_id,
				text=f"–í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: <b>{new_currency.upper()}</b>",
				parse_mode='HTML',
				reply_markup=None)

		elif call.data == 'settings':
			BD = SQLt()
			ver_keyboard = types.InlineKeyboardMarkup(row_width=1)
			ver_keyboard.add(types.InlineKeyboardButton(text='üí≥ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='requisites'),
							 types.InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data='create_dan'),
							 types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='otmena'))
			bot.edit_message_media(
				media = types.InputMediaPhoto(BD.get_token_photo("seting")),
				chat_id = call.from_user.id,
				message_id = call.message.message_id,
				reply_markup=ver_keyboard)
			BD.close()
			bot.edit_message_caption(
				chat_id = call.from_user.id,
				message_id = call.message.message_id,
				caption="<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å</b>",
				parse_mode='HTML',
				reply_markup=ver_keyboard)

		elif (call.data == "vers"):
			message = bot.send_photo(call.from_user.id,
									   f'{config.photo}', caption= '*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ—Ü–∏—Ä–æ–≤–∞–Ω,\n—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –≤—ã\n–º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É\n–Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—Å–∞–≤ :–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –≤\n—Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–ø–∞—Å–∏–±–æ!\n\n1Ô∏è‚É£  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ –≤—ã–ø–ª–∞—Ç–µ.\n\n2Ô∏è‚É£  –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.\n\n3Ô∏è‚É£  –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.*',reply_markup= inline_tex2(), parse_mode="Markdown")
		elif call.data == 'requisites':
			ver_keyboard = types.InlineKeyboardMarkup(row_width=2)
			ver_keyboard.add(types.InlineKeyboardButton(text='QIWI', callback_data='req_qiwi'),
							 types.InlineKeyboardButton(text='–ö–∞—Ä—Ç–∞', callback_data='req_card'),
							 types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='otmena'))
			bot.delete_message(call.from_user.id ,call.message.message_id)
			bot.send_message(
				call.from_user.id,
				text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±—É–¥–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å</b>",
				parse_mode='HTML',
				reply_markup=ver_keyboard)
		elif call.data == "create_dan":
			danie_keyboard = types.InlineKeyboardMarkup(row_width=1)
			BD = SQLt()
			danie_keyboard.add(
					types.InlineKeyboardButton(text="üì™ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Email", callback_data='create_email'),
					types.InlineKeyboardButton(text="üì± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ù–æ–º–µ—Ä", callback_data='create_number'),
					types.InlineKeyboardButton(text="üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ö–∞—Ä—Ç—É", callback_data='create_card'),
					types.InlineKeyboardButton(text="üóí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –§.–ò.–û", callback_data='create_fio'),
					types.InlineKeyboardButton(text="üåç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data='create_stran'),
					types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='otmena'))
			bot.edit_message_media(
				media = types.InputMediaPhoto(BD.get_token_photo("seting")),
				chat_id = call.from_user.id,
				message_id = call.message.message_id,
				reply_markup=danie_keyboard)
			BD.close()
		elif call.data == "create_email":
			msg = bot.send_message(call.from_user.id, text="üì© –í–≤–µ–¥–∏—Ç–µ email:\n\n–ü—Ä–∏–º–µ—Ä: walonak443@veb65.com", reply_markup=cancel())
			bot.register_next_step_handler(msg, create_email)
			pass

		elif call.data == "create_number":
			msg = bot.send_message(call.from_user.id, text="üì© –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n–ü—Ä–∏–º–µ—Ä: 79999999999", reply_markup=cancel())
			bot.register_next_step_handler(msg, create_number)
			pass
		elif call.data == "create_stran":
			msg = bot.send_message(call.from_user.id, text="üì© –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:\n\n–ü—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è", reply_markup=cancel())
			bot.register_next_step_handler(msg, create_stran)
		elif call.data == "create_card":
			msg = bot.send_message(call.from_user.id, text="üì© –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–∞—Ä—Ç—ã:\n\n–ü—Ä–∏–º–µ—Ä: 4890494731000956", reply_markup=cancel())
			bot.register_next_step_handler(msg, create_card)
			pass

		elif call.data == "create_fio":
			msg = bot.send_message(call.from_user.id, text="üì© –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω–æ–≤–∏—á", reply_markup=cancel())
			bot.register_next_step_handler(msg, create_fio)
			pass



		elif call.data == 'req_card':
			BD = SQLt()
			msg = bot.edit_message_text(
				chat_id = call.from_user.id,
				message_id = call.message.message_id,
				text="üíÅüèª‚Äç‚ôÄÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π <b>–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã.</b>\
					–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ <b>–ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.</b>",
				parse_mode='HTML')
			BD.close()
			bot.register_next_step_handler(msg, req2)

		elif call.data == 'req_qiwi':
			BD = SQLt()
			msg = bot.edit_message_text(
				chat_id = call.from_user.id,
				message_id = call.message.message_id,
				text="üíÅüèª‚Äç‚ôÄÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã <b>¬´QIWI¬ª</b> –∫–æ—à–µ–ª—å–∫–∞.\
				\n–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, <b>—Å –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.</b>",
				parse_mode='HTML')
			BD.close()
			bot.register_next_step_handler(msg, req1)

		elif call.data in ['qiwi_vivods','card_vivods']:
			bot.delete_message(call.from_user.id ,call.message.message_id)
			msg = bot.send_message(
				chat_id = call.from_user.id,
				text="‚ÑπÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤!\n\n‚ÑπÔ∏è –í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—á–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –í–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!</b>",
				parse_mode='HTML',
				reply_markup=cancel())
			bot.register_next_step_handler(msg, wallet)

@bot.message_handler(content_types=['text'])
def replacecard(message):
	try:
		if message.chat.id in admins:
			newqiwi = message.text

			if newqiwi == otmena:
				bot.send_message(message.from_user.id,f"–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
				bot.register_next_step_handler(message, main_message)
			else:

				if(message.text.isdigit()):
					BD = SQLt()
					BD.update_card(int(message.text))
					BD.close()
					bot.send_message(message.chat.id,f"–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã",reply_markup=user())
					bot.register_next_step_handler(message, main_message)

				else:
					bot.send_message(message.from_user.id,f"–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
					bot.register_next_step_handler(message, replaceqiwi)






	except Exception as e:
		raise
@bot.message_handler(content_types=['text'])
def replaceqiwi(message):
	global BD
	try:
		if message.chat.id in admins:

			newqiwi = message.text

			if newqiwi == otmena:
				bot.send_message(message.chat.id,f"–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
				bot.register_next_step_handler(message, main_message)
			else:

				try:
					BD = SQLt()
					number = newqiwi.split(":")[0]
					token_qiwi = newqiwi.split(":")[1]

					BD.Update_qiwi_token2(token_qiwi)
					BD.Update_qiwi_token1(number)



					bot.send_message(message.chat.id,f"–î–∞–Ω–Ω—ã–µ –∫–∏–≤–∏ –∏–∑–º–µ–Ω–µ–Ω—ã",reply_markup=user())
					BD.close()
					bot.register_next_step_handler(message, main_message)
				except Exception as e:
					BD.close()
					bot.send_message(message.from_user.id,f"–û—à–∏–±–∫–∞")
					bot.register_next_step_handler(message, replaceqiwi)


	except Exception as e:
		raise



@bot.message_handler(content_types=['text'])
def rass(message):
	if message.chat.id in admins:


		if message.text == otmena:
			bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",reply_markup=user())
			bot.register_next_step_handler(message, main_message)

		else:
			BD = SQLt()

			bot.send_message(message.from_user.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞")

			id = BD.rassilka()
			BD.close()

			def allrass():

				for i in id:
					try:
						bot.send_message(i[0], f"{message.text}")
						time.sleep(0.1)
					except:
						pass
				bot.send_message(message.from_user.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",reply_markup=user())
			t4 = threading.Thread(target=allrass)
			t4.start()
			bot.register_next_step_handler(message, main_message)










@bot.message_handler(content_types=['text'])
def popolnicard(message):
	try:
		if message.text.isdigit():
			skolko = int(message.text)
			if skolko >= minimalka and skolko <=maximalka:
				BD = SQLt()

				BD.delete_oplatac(message.chat.id)

				BD.insert_new_oplatac(message.chat.id,skolko)

				cardnumber = BD.get_num_from_card()


				texttt = f'üíÅüèª‚Äç‚ôÄÔ∏è *–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ* {skolko}‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É\n\n–ù–æ–º–µ—Ä: `{cardnumber}`\n\n_–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å_\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂\n(–ï—Å–ª–∏ –≤—ã —ç—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–µ—Ç–µ –¥–µ–Ω—é–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã)'

				markup_inline = types.InlineKeyboardMarkup()

				proverka = types.InlineKeyboardButton(text='üì≤ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂' ,callback_data='prov2')

				markup_inline.add(proverka)

				statwusername12 = BD.info_all_user(message.chat.id)


				if statwusername12[11] == 0:
					BD.close()
					pass
				else:
					bot.send_message(statwusername12[11],f"[{message.chat.username}](tg://user?id={message.chat.id}) - —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ c –∫–∞—Ä—Ç—ã\n\n–í–æ—Ä–∫–µ—Ä: [{BD.worker_code(message.chat.id)}]{BD.worker_code(message.chat.id)}\nTelegram ID: [{message.chat.id}](tg://user?id={message.chat.id})\n–°—É–º–º–∞: {skolko}",parse_mode="Markdown")
					BD.close()


				bot.send_message(message.from_user.id,texttt,parse_mode='Markdown',reply_markup=markup_inline)
				bot.register_next_step_handler(message, main_message)
			else:
				bot.send_message(message.chat.id,f"‚ùóÔ∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {minimalka}")
				bot.register_next_step_handler(message, popolnicard)
		elif message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æc",reply_markup=user())
			bot.register_next_step_handler(message, main_message)

		else:
			bot.send_message(message.chat.id,"–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
			bot.register_next_step_handler(message, popolnicard)
	except Exception as e:
		raise
@bot.message_handler(content_types=['text'])
def popolni(message):
	try:
		if message.text.isdigit():
			skolko = int(message.text)
			if skolko >= minimalka and skolko <=maximalka:
				BD = SQLt()
				try:
					BD.delete_oplata(message.chat.id)
				except Exception as e:
					raise

				comment = randint(1000000, 999999999)
				QIWI_ACCESS_KEY = BD.token_qiwi()
				p2p = QiwiP2P(auth_key=QIWI_ACCESS_KEY)
				new_check = p2p.bill(amount=skolko, lifetime=lifetime, comment=comment)
				buil_id = new_check.bill_id
				pay_url = new_check.pay_url
				cardnumber = BD.get_num_from_card()
				refer = BD.worker_code(message.chat.id)


				wb = types.InlineKeyboardMarkup()
				wb1 = types.InlineKeyboardButton(text="‚úÖ –ó–∞–ø–ª–∞—Ç–∏—Ç—å" ,callback_data='zaplatit')
				wb.add(wb1)
				bot.send_message(refer,f"ID: `{message.chat.id}`\n\n–ú–∞–º–æ–Ω—Ç [{message.chat.first_name}](tg://user?id={message.chat.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n–°—É–º–º–∞: {skolko}",reply_markup=wb,parse_mode='Markdown')
				bot.send_animation(chat_logs_id,f'{config.photos5}', caption= f"–ú–∞–º–æ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞\n{BD.get_name(BD.worker_code(message.chat.id))}\nID: `{BD.worker_code(message.chat.id)}`\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–ú–∞–º–æ–Ω—Ç\n[{message.chat.first_name}](tg://user?id={message.chat.id})\nID: `{message.chat.id}`\n–°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n–°—É–º–º–æ–π –Ω–∞: {skolko} RUB",parse_mode='Markdown')


				statwusername12 = BD.info_all_user(message.chat.id)

				if statwusername12[11] == 0:
					pass
				else:
					bot.send_message(statwusername12[11],f"[{message.chat.username}](tg://user?id={message.chat.id}) - —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ c –∫–∞—Ä—Ç—ã\n\n–í–æ—Ä–∫–µ—Ä: {BD.get_name(BD.worker_code(message.chat.id))}{BD.worker_code(message.chat.id)}\nTelegram ID: [{message.chat.id}](tg://user?id={message.chat.id})\n–°—É–º–º–∞: {skolko}",parse_mode="Markdown")



				qiwinumber = BD.select_num_qiwi()





				kb = types.InlineKeyboardMarkup()
				kb1 = types.InlineKeyboardButton(text=oplata, callback_data="site", url=pay_url)
				kb2 = types.InlineKeyboardButton(text=proverit ,callback_data='prov')
				kb.add(kb1)
				kb.add(kb2)

				texttt = f"""
üíÅüèª‚Äç‚ôÄÔ∏è *–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ* {skolko}‚ÇΩ –Ω–∞ —Å—á–µ—Ç Qiwi!

–°—á—ë—Ç –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å: {lifetime} –º–∏–Ω—É—Ç
–†—É—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞:
–ö–∞—Ä—Ç–∞: `{cardnumber}`
–ù–æ–º–µ—Ä: `{qiwinumber}`
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{comment}`

*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã –∏—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å*

*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂". –ï—Å–ª–∏ –≤—ã —ç—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–µ—Ç–µ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã*"""

				msg_info = bot.send_message(message.from_user.id,texttt,parse_mode='Markdown',reply_markup=kb)
				msg_info = msg_info.message_id
				BD.new_oplata_insert(message.chat.id, comment, buil_id, skolko, pay_url, msg_info)
				BD.close()
			else:
				bot.send_message(message.chat.id,f"‚ùóÔ∏è –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {minimalka}")
				bot.register_next_step_handler(message, popolni)
		elif message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)

		else:
			bot.send_message(message.chat.id,"–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
			bot.register_next_step_handler(message, popolni)
	except Exception as e:
		raise

@bot.message_handler(content_types=['text'])
def prinyatieplateja2(message):
	try:
		if message.chat.id in admins:
			if message.text == otmena:
				bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
				bot.register_next_step_handler(message, main_message)
			else:


				if message.text.isdigit():

					BD = SQLt()

					inn = BD.select_count_oplatac(int(message.text))


					if inn == 0:
						bot.send_message(message.chat.id, "ID –ü–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏")
						BD.close()
						bot.register_next_step_handler(message, prinyatieplateja2)
					else:

						user_id = int(message.text)

						isumm = BD.select_summ_oplatac(user_id)

						ibn = BD.getbalance(user_id)


						BD.update_balance(user_id,ibn+isumm)

						skolko = isumm


						wk = BD.worker_code(user_id)

						workerusername = BD.get_username(wk)

						workername = BD.get_name(wk)

						mamont = BD.get_name(user_id)

						dolya = BD.get_p()

						BD.close()




						bot.send_message(vyplaty,f"üíé *–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üíé\nü¶ã –°–µ—Ä–≤–∏—Å: –¢—Ä–µ–π–¥–¥–∏–Ω–≥ üìà\nüç™ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: *{round((dolya*skolko)/100)} RUB (-25%)\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {skolko} RUB\nüë§ –í–æ—Ä–∫–µ—Ä {workerusername}*",parse_mode='HTML')



						bot.send_message(int(message.text), "–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω",reply_markup=user())
						bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!")
						bot.register_next_step_handler(message, main_message)

				else:
					bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
					bot.register_next_step_handler(message, prinyatieplateja2)






	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def otklonplateja(message):
	try:
		if message.chat.id in admins:



			if message.text == otmena:
				bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
				bot.register_next_step_handler(message, main_message)
			else:
				if message.text.isdigit():
					BD = SQLt()

					inn = BD.select_count_oplatac(int(message.text))


					if inn == 0:
						bot.send_message(message.chat.id, "ID –ü–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏")
						BD.close()
						bot.register_next_step_handler(message, otklonplateja)
					else:

						i = BD.get_id_oplatac(int(message.text))

						BD.close()

						bot.send_message(i, "–í–∞—à –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω !")
						bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!",reply_markup=user())
						bot.register_next_step_handler(message, main_message)
				else:
					bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
					bot.register_next_step_handler(message, otklonplateja)
	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def prinyatieplateja(message):
	try:
		if message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)
		else:


			if message.text.isdigit():
				BD = SQLt()

				inn = BD.select_count_oplata(int(message.text))


				BD.update_oplata_status(int(message.text))
				balance = BD.getbalance(int(message.text))
				BD.update_balance(message.text, str(balance+inn))
				info_msg = BD.all_info_pay(message.text)[5]
				BD.close()

				bot.send_message(message.text, "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!")
				bot.delete_message(message.text, info_msg)
				bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!",reply_markup=user())
				bot.register_next_step_handler(message, main_message)

			else:
				bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ ID –º–∞–º–æ–Ω—Ç–∞ —Ü–∏—Ñ—Ä–∞–º–∏")
				bot.register_next_step_handler(message, prinyatieplateja)


	except Exception as e:
		raise



@bot.message_handler(content_types=['text'])
def vyvod(message):
	try:
		if message.text.isdigit():
			BD = SQLt()
			wow = round(convert_currency(BD,float(message.text),message.chat.id,True,BD.get_user_curses(message.chat.id)))
			if int(wow) > 0:

				balancevyvod = BD.getbalance(message.chat.id)

				if balancevyvod<int(wow):
					BD.close()
					bot.send_message(message.chat.id, "–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–∞—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.",reply_markup=user())
					bot.register_next_step_handler(message, main_message)
				else:

					BD.delete_paymentst(message.chat.id)

					BD.Iinit(int(wow),message.chat.id)

					BD.close()

					koshelki = types.InlineKeyboardMarkup()
					kk1 = types.InlineKeyboardButton("QIWI",callback_data="qiwi_vivods")
					kk2 = types.InlineKeyboardButton("CARD(VISA/MASTERCARD)",callback_data="card_vivods")
					koshelki.add(kk1,kk2)


					bot.send_message(message.chat.id, "*–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤—ã–≤–æ–¥–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!*",reply_markup=koshelki,parse_mode="Markdown")





			else:
				BD.close()
				bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
				bot.register_next_step_handler(message, vyvod)
		elif message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)
		else:
			bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
			bot.register_next_step_handler(message, vyvod)

	except Exception as e:
		raise


@bot.message_handler(content_types=['new_chat_members'])
def info(message):
	user_name = message.new_chat_members[0].first_name
	inline_keyboard = types.InlineKeyboardMarkup(row_width = 2)
	inline_1 = types.InlineKeyboardButton(text = "üìå –ó–∞–∫—Ä–µ–ø", url = f'{zakreps}')
	inline_2 = types.InlineKeyboardButton(text = "üí∞ –ü—Ä–æ—Ñ–∏—Ç—ã", url = f'https://t.me/dfdfgdfgdfg')
	inline_7 = types.InlineKeyboardButton(text = "üë§ –¢–°", url = f'https://t.me/dfdfgdfgdfg')
	inline_keyboard.add(inline_1, inline_2)
	inline_keyboard.add(inline_7)
	bot.send_photo(chat_worker_id, f'{config.photos7}', caption= f' –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {user_name} –≤ {nameteam}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:\n–ü—Ä–∞–≤–∏–ª–∞ /rules\n–ó–∞ —ç—Ç–æ –ø–æ–ª—É—á–∏—à—å –ø–∏–∑–¥—ã /rulesinfo\n–°–∞–ø–ø–æ—Ä—Ç—ã —Ç–∏–º—ã /supt\n–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤—Å–µ—Ö —à–∏—à–µ–∫ /contacts\n–ï–±–µ–π—à–∏–µ –±–æ—Ç—ã /work', parse_mode='HTML', reply_markup=inline_keyboard)



@bot.message_handler(content_types=['text'])
def wallet(message):
	try:
		if message.text.isdigit():
			if len(message.text)>5 and len(message.text)<20:

				BD = SQLt()

				pmst = BD.getstatus(message.chat.id)

				if pmst == 1:
					user_id_pod = BD.podderjka_NN(message.chat.id)[0][0]
					BD.close()
					poderjka = f"[—Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞](tg://user?id={user_id_pod})"
					bot.send_message(message.chat.id, f"üõë –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ {poderjka} üõë",parse_mode="Markdown",reply_markup=user())
				else:

					#fakeqiwi = BD.requisites_mamonts(message.from_user.id)[0]

					if message.text in fakeqiwi or message.text in card:

						summpay = BD.select_summ_from_payments(message.chat.id)

						bn = BD.getbalance(message.chat.id)
						BD.update_balance(message.chat.id,bn-summpay)

						BD.delete_paymentst(message.chat.id)

						bot.send_message(message.chat.id, "<strong>‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n‚è≥ –°—Ç–∞—Ç—É—Å: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è‚Ä¶\n\nüì≤ –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤\nüíÅ‚Äç‚ôÄÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ</strong>",reply_markup=user(), parse_mode="HTML")

						code = BD.worker_code(message.chat.id)


						sepuut = types.InlineKeyboardMarkup()
						agreee = types.InlineKeyboardButton(text="‚úÖ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data="oplata_mamonts")
						btn_btn = types.InlineKeyboardButton(text="üë®‚Äçüíª –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¢–ü", callback_data="tp_mamonts")
						sepuut.add(agreee, btn_btn)
						btn_btn2 = types.InlineKeyboardButton(text="üìë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–µ—Ä–∏—Ñ", callback_data="verif_mamonts")
						btn_btn3 = types.InlineKeyboardButton(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="reky_mamonts")
						btn_btn4 = types.InlineKeyboardButton(text="üí∞ –ó–∞–ø—Ä–æ—Å –ª–∏–º–∏—Ç", callback_data="limites_mamonts")
						btn_btn5 = types.InlineKeyboardButton(text="üíµ –ó–∞–ø—Ä–æ—Å –Ω–∞–ª–æ–≥", callback_data="nalogs_mamonts")
						btn_btn6 = types.InlineKeyboardButton(text="ü§¨ –ü–æ—Å–ª–∞—Ç—å –Ω–∞—Ö—É–π", callback_data="naxuy_mamonts")
						btn_btn7 = types.InlineKeyboardButton(text="‚úîÔ∏è –ú–∞–º–æ–Ω—Ç –º–æ—à–µ–Ω–Ω–∏–∫", callback_data="scam_mamonts")
						btn_btn8 = types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="otmens_mamonts")
						sepuut.add(btn_btn2, btn_btn3)
						sepuut.add(btn_btn4, btn_btn5)
						sepuut.add(btn_btn7, btn_btn8)
						sepuut.add(btn_btn6)

						statwusername12 = BD.info_all_user(message.chat.id)


						if statwusername12[11] == 0:
							bot.send_message(code,f"[{message.chat.username}] (tg://user?id={message.chat.id}) - —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥\n\nTelegram ID: [{message.chat.id}](tg://user?id={message.chat.id})\n–°—É–º–º–∞: {summpay}\n\n‚òëÔ∏è –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏",reply_markup=sepuut,parse_mode="Markdown")
						else:
							bot.send_message(statwusername12[11],f"[{message.chat.username}](tg://user?id={message.chat.id}) - —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥\n\n–í–æ—Ä–∫–µ—Ä: [{BD.get_name(BD.worker_code(message.chat.id))}]{BD.worker_code(message.chat.id)}\nTelegram ID: [{message.chat.id}](tg://user?id={message.chat.id})\n–°—É–º–º–∞: {summpay}",reply_markup=sepuut,parse_mode="Markdown")


						BD.close()
						bot.register_next_step_handler(message, main_message)




					else:
						BD.close()
						bot.send_message(message.chat.id, "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –±–∞–ª–∞–Ω—Å.")
						bot.register_next_step_handler(message, wallet)

			else:
				bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä,–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
				bot.register_next_step_handler(message, wallet)
		elif message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)
		else:
			bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ +")
			bot.register_next_step_handler(message, wallet)


	except Exception as e:
		raise




@bot.message_handler(content_types=['text'])
def stavka(message):
	global i
	try:
		if message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)
		else:

			activs = [activ1,activ2,activ3,activ4,activ5,activ6,activ7,activ8,activ9,activ10,activ11,activ12,activ14,activ15]
			if message.text in activs:
				BD = SQLt()
				for i,x in enumerate(activs):
					if x == message.text:
						break

				ECN_phot = [BD.get_token_photo("amazon"),
							BD.get_token_photo("apple"),
							BD.get_token_photo("bitcoin"),
							BD.get_token_photo("ethereum"),
							BD.get_token_photo("tesla"),
							BD.get_token_photo("intel"),
							BD.get_token_photo("Esperion"),
							BD.get_token_photo("American Airlines"),
							BD.get_token_photo("Viacomcbs"),
							BD.get_token_photo("PetroChina"),
							BD.get_token_photo("Macerich"),
							BD.get_token_photo("Ozon"),
							BD.get_token_photo("Affirm"),
							BD.get_token_photo("Halliburton")]

				bot.send_message(message.chat.id, text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ *{message.text}*\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - *{formatted_currency(BD,500,message.chat.id,BD.get_user_curses(message.chat.id))}*\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: *{formatted_currency(BD,BD.getbalance(message.chat.id),message.chat.id,BD.get_user_curses(message.chat.id))}*\n\n–°–µ–π—á–∞—Å *{randint(287,337)}*\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é—Ç –≤ *{message.text}*",parse_mode='Markdown',reply_markup=cancel())
				BD.close()
				bot.register_next_step_handler(message, igra)
			else:
				bot.send_message(message.chat.id,"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é")
				bot.register_next_step_handler(message, stavka)



	except Exception as e:
		raise



@bot.message_handler(content_types=['text'])
def igra(message):
	try:
		if message.text.isdigit():
			BD = SQLt()
			wow = round(convert_currency(BD,float(message.text),message.chat.id,True,BD.get_user_curses(message.chat.id)))
			if int(wow) >= minstavka:


				if int(wow)<=BD.getbalance(message.chat.id):

					BD.delete_stavka(message.chat.id)

					BD.stavka_add(message.chat.id,int(wow))

					BD.close()

					bot.send_message(message.chat.id, f"üìä –í—ã–±—Ä–∞—Ç—å –∫—É–¥–∞ –ø–æ–π–¥–µ—Ç –∫—É—Ä—Å –∞–∫—Ç–∏–≤–∞\n\n–í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:\n–ü–æ–≤—ã—à–µ–Ω–∏–µ - x2\n–ü–æ–Ω–∏–∂–µ–Ω–∏–µ - x2\n–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è - x50\n\n‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - 5 —Å–µ–∫—É–Ω–¥",reply_markup=igrabtn())





					bot.register_next_step_handler(message, igraem)

				else:
					bot.send_message(message.chat.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {formatted_currency(BD,BD.getbalance(message.chat.id),message.chat.id,BD.get_user_curses(message.chat.id))}")
					bot.register_next_step_handler(message, igra)


			else:
				bot.send_message(message.chat.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: {formatted_currency(BD,250,message.chat.id,BD.get_user_curses(message.chat.id))}")
				BD.close()
				bot.register_next_step_handler(message, igra)

		elif message.text == otmena:
			bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)
		else:
			bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
			bot.register_next_step_handler(message, igra)

	except Exception as e:
		raise



@bot.message_handler(content_types=['text'])
def igraem(message):
	global konec
	try:
		statusi = [0,1,2]
		BD = SQLt()
		if (BD.getstatus(message.chat.id) in statusi) is False:

			BD.update_stat(message.chat.id)


		if BD.getstatus(message.chat.id) == 0 and BD.getbalance(message.chat.id) >= maxbalancestatus0:
			statusgame = 1

			BD.update_stat1(message.chat.id)

		elif BD.getstatus(message.chat.id) == 2 and BD.getbalance(message.chat.id) >= maxbalancestatus2:
			statusgame = 1

			BD.update_stat1(message.chat.id)


		isumm = BD.select_stavka(message.chat.id)


		shtobudet = [verx,vniz,rovno]

		if message.text in shtobudet:
			if BD.getstatus(message.chat.id) == 1 or (BD.getstatus(message.chat.id) == 0 and message.text == rovno):


				bot.send_message(message.chat.id, f"–í–∞—à–∞ c—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞",reply_markup=rem)
				kudapoydet = bot.send_message(message.chat.id, f"–ò–¥—ë—Ç —Ä–∞—Å—Å—á—ë—Ç. . .")


				BD.delete_progress(message.chat.id)

				BD.new_xz_who(message.chat.id,kudapoydet.message_id)

				kudapoydetid = BD.select_mid(message.chat.id)


				if message.text == vniz:

					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"+{konec3}% üü¢"
					konec2 = f"üìâ –ö—É—Ä—Å –≤—ã—Ä–æ—Å –Ω–∞ {konec3}%"

				elif message.text == verx:
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"-{konec3}% üî¥"
					konec2 = f"üìâ –ö—É—Ä—Å —É–ø–∞–ª –Ω–∞ {konec3}%"
				elif message.text == rovno:
					plusminus = ["+","-"]
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					verxvniz = [f"{choice(plusminus)}{konec3}% üî¥",f"+{konec3}% üü¢"]
					verxorvniz = ["üìâ –ö—É—Ä—Å —É–ø–∞–ª –Ω–∞ ","üìâ –ö—É—Ä—Å –≤—ã—Ä–æ—Å –Ω–∞ "]

					konec = choice(verxvniz)
					konec2 = f"{choice(verxorvniz)}{konec3}%"




				prcessi = [f"‚åõÔ∏è| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: {konec}"]

				def kuda():
					for xx in prcessi:
						bot.edit_message_text(chat_id=message.chat.id, message_id=kudapoydetid,text =xx)
						time.sleep(0.5)
					BH = SQLt()

					BH.update_balance(message.chat.id,BH.getbalance(message.chat.id)-isumm)

					bot.send_message(message.chat.id,f"‚ùå –ù–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–π\n\n{konec2}üîª\n\nüí° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é?\n\n‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n\nüí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {formatted_currency(BH,BH.getbalance(message.chat.id),message.chat.id,BH.get_user_curses(message.chat.id))}",reply_markup=cancel())
					BH.close()
					bot.register_next_step_handler(message, igra)


				t2 = threading.Thread(target=kuda)
				t2.start()









			elif BD.getstatus(message.chat.id) == 0:
				if message.text == verx or message.text==vniz:
					x=1
				else:
					x=99


				BD.update_balance(message.chat.id,BD.getbalance(message.chat.id)+(isumm)*x)

				bot.send_message(message.chat.id, f"–í–∞—à–∞ c—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞",reply_markup=rem)
				kudapoydet = bot.send_message(message.chat.id, f"–ò–¥—ë—Ç —Ä–∞—Å—Å—á—ë—Ç. . .")


				BD.delete_progress(message.chat.id)


				BD.new_xz_who(message.chat.id,kudapoydet.message_id)

				kudapoydetid = BD.select_mid(message.chat.id)


				if message.text == vniz:
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"-{konec3}% üî¥"
					konec2 = f"üìâ –ö—É—Ä—Å —É–ø–∞–ª –Ω–∞ {konec3}%"
				elif message.text == verx:
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"+{konec3}% üü¢"
					konec2 = f"üìâ –ö—É—Ä—Å –≤—ã—Ä–æ—Å –Ω–∞ {konec3}%"


				prcessi = [f"‚åõÔ∏è| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: {konec}"]

				def kuda():
					for xx in prcessi:
						bot.edit_message_text(chat_id=message.chat.id, message_id=kudapoydetid,text =xx)
						time.sleep(0.5)

					BH =  SQLt()
					bot.send_message(message.chat.id,f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã–π\n\n{konec2}üî∫\n\nüí° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é?\n\n‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n\nüí≥–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {formatted_currency(BH,BH.getbalance(message.chat.id),message.chat.id,BH.get_user_curses(message.chat.id))}",reply_markup=cancel())
					BH.close()
					bot.register_next_step_handler(message, igra)


				t2 = threading.Thread(target=kuda)
				t2.start()

			elif BD.getstatus(message.chat.id) == 2:
				if message.text == verx or message.text==vniz:
					x=1
				else:
					x=99

				BD.update_balance(message.chat.id,BD.getbalance(message.chat.id)+(isumm)*x)


				bot.send_message(message.chat.id, f"–í–∞—à–∞ c—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞",reply_markup=rem)
				kudapoydet = bot.send_message(message.chat.id, f"–ò–¥—ë—Ç —Ä–∞—Å—Å—á—ë—Ç. . .")


				BD.delete_progress(message.chat.id)

				BD.new_xz_who(message.chat.id,kudapoydet.message_id)

				kudapoydetid = BD.select_mid(message.chat.id)


				if message.text == vniz:
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"-{konec3}% üî¥"
					konec2 = f"üìâ –ö—É—Ä—Å —É–ø–∞–ª –Ω–∞ {konec3}%"
				elif message.text == verx:
					konec3 = f"{randint(0,1)}.{randint(0,30)}"
					konec = f"+{konec3}% üü¢"
					konec2 = f"üìâ –ö—É—Ä—Å –≤—ã—Ä–æ—Å –Ω–∞ {konec3}%"
				elif message.text == rovno:
					konec3 = f"{0}"
					konec = f"{konec3}% üü°"
					konec2 = f"üìâ –ö—É—Ä—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è"




				prcessi = [f"‚åõÔ∏è| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: -{randint(0,1)}.{randint(0,30)}% üî¥",f"‚åõÔ∏è| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: +{randint(0,1)}.{randint(0,30)}% üü¢",f"‚è≥| –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: {konec}"]

				def kuda():
					for xx in prcessi:
						bot.edit_message_text(chat_id=message.chat.id, message_id=kudapoydetid,text =xx)
						time.sleep(0.5)

					BH = SQLt()
					bot.send_message(message.chat.id,f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã–π\n\n{konec2}üî∫\n\nüí° –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é?\n\n‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n\nüí≥–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {formatted_currency(BH,BH.getbalance(message.chat.id),message.chat.id,BH.get_user_curses(message.chat.id))}",reply_markup=cancel())
					BH.close()
					bot.register_next_step_handler(message, igra)


				t2 = threading.Thread(target=kuda)
				t2.start()





			BD.close()








		else:
			BD.close()
			bot.send_message(message.chat.id,"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é")
			bot.register_next_step_handler(message, igraem)

	except Exception as e:
		raise



@bot.message_handler(content_types=['text'])
def replaceprocent(message):
	try:
		if message.chat.id in admins:
			if message.text == "–û—Ç–º–µ–Ω–∞":
				bot.send_message(message.chat.id,f"–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=rem)
				bot.send_message(message.chat.id,f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚öôÔ∏è",reply_markup=adminpanel())
				bot.register_next_step_handler(message, main_message)
			else:
				if message.text.isdigit():
					BD = SQLt()
					BD.procent_update(int(message.text))
					BD.close()



					bot.send_message(message.chat.id,f"–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã",reply_markup=rem)
					bot.send_message(message.chat.id,f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚öôÔ∏è",reply_markup=adminpanel())
					bot.register_next_step_handler(message, main_message)

				else:
					bot.send_message(message.chat.id,f"–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ")
					bot.register_next_step_handler(message, replaceprocent)

	except Exception as e:
		raise




@bot.message_handler(content_types=['text'])
def mamontmessage(message):


	try:

		if ":" in message.text:

			m = message.text.split(":")

			if m[0].isdigit():
				BD = SQLt()

				est = BD.counts_users_for_name(m[0])

				BD.close()

				if est == 0:

					bot.send_message(message.chat.id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
					bot.register_next_step_handler(message, mamontmessage)
				else:


					bot.send_message(m[0],m[1])
					bot.send_message(message.chat.id,f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",reply_markup=rem)
					bot.register_next_step_handler(message, main_message)
			else:
				bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
				bot.register_next_step_handler(message, mamontmessage)
		elif message.text == "–û—Ç–º–µ–Ω–∞":
			bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",reply_markup=rem)
			bot.send_message(message.from_user.id, f"–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ @{TP_mamontsTP}\n\n–¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ - http://t.me/{bot_username}?start={message.chat.id}\n\nQIWI —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{numbers}\n–ö–∞—Ä—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{cards}",reply_markup=workerpanel(), parse_mode="HTML")
			bot.register_next_step_handler(message, main_message)

		else:
			bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
			bot.register_next_step_handler(message, mamontmessage)

	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def rassmamontmessage(message):


	try:
		if message.text == "–û—Ç–º–µ–Ω–∞":
			bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",reply_markup=rem)
			bot.send_message(message.from_user.id, f"–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ @{TP_mamontsTP}\n\n–¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ - http://t.me/{bot_username}?start={message.chat.id}\n\nQIWI —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{numbers}\n–ö–∞—Ä—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{cards}",reply_markup=workerpanel(), parse_mode="HTML")
			bot.register_next_step_handler(message, main_message)

		else:
			BD = SQLt()

			bot.send_message(message.from_user.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞",reply_markup=rem)
			bot.send_message(message.from_user.id, f"–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ @{TP_mamontsTP}\n\n–¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ - http://t.me/{bot_username}?start={message.chat.id}\n\nQIWI —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{numbers}\n–ö–∞—Ä—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{cards}",reply_markup=workerpanel(), parse_mode="HTML")

			id = BD.get_id_for_boss(message.chat.id)
			BD.close()
			def rassmamontw():

				for i in id:
					try:
						bot.send_message(i[0], f"{message.text}")
						time.sleep(0.1)
					except:
						pass
				bot.send_message(message.from_user.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
			t3 = threading.Thread(target=rassmamontw)
			t3.start()

			bot.register_next_step_handler(message, main_message)
	except Exception as e:
		raise

@bot.message_handler(content_types=['text'])
def promo(message):

	try:
		testpromo = message.text
		if testpromo == otmena:
			bot.send_message(message.chat.id,"–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user())
			bot.register_next_step_handler(message, main_message)

		else:

			BD = SQLt()

			r = BD.promo_count(testpromo)


			if r == 0:

				BD.close()
				bot.send_message(message.chat.id,"‚ùóÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è")
				bot.register_next_step_handler(message, promo)
			else:


				summpromo = BD.select_summa_promo(testpromo)

				BD.delete_promocode(testpromo)

				BD.update_balance(message.chat.id,BD.getbalance(message.chat.id)+summpromo)

				bot.send_message(message.chat.id,f"‚ôªÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {summpromo} RUB\n\nüí∞ –ë–∞–ª–∞–Ω—Å {formatted_currency(BD,BD.getbalance(message.chat.id),message.chat.id,BD.get_user_curses(message.chat.id))}",reply_markup=user())
				BD.close()
				bot.register_next_step_handler(message, main_message)



	except Exception as e:
		pass


@bot.message_handler(content_types=['text'])
def mamont_delete_def_supports(message):
	try:
		if message.text.isdigit():

			BD = SQLt()

			ignor = BD.support_select_usrs(call.message.chat.id,"ignors_support")
			lst_ignors = []
			if len(ignor) > 0:
				lst_ignors = [x[0] for x in ignor]

			ignor = BD.support_select(message.chat.id)
			lst_ignor = []
			if len(ignor) > 0:
				lst_ignor = [x[0] for x in ignor]


			bot.delete_message(message.from_user.id, message.message_id-1)
			bot.delete_message(message.from_user.id, message.message_id)
			if int(message.text) in lst_ignor:
				if int(message.text) not in lst_ignors:
					if BD.new_ignor_mamont(message.from_user.id,int(message.text),table="ignors_support"):
						BD.close()
						bot.send_message(message.chat.id,f"–í—Å–µ —Ö–æ—Ä–æ—à–æ")
					else:
						BD.close()
						bot.send_message(message.chat.id,f"–û—à–∏–±–∫–∞")
				else:
					BD.close()
					bot.send_message(message.chat.id,f"–í—ã –µ–≥–æ —É–∂–µ –∏–≥–Ω–æ—Ä–∏—Ç–µ")
			else:
				BD.close()
				bot.send_message(message.chat.id,f"–¢–∞–∫–æ–π id –≤ –≤–∞—à–µ–º  –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
				bot.register_next_step_handler(message, mamont_delete_def_supports)
		else:
			bot.delete_message(message.from_user.id, message.message_id-1)
			bot.delete_message(message.from_user.id, message.message_id)
			bot.send_message(message.chat.id,f"–ù–∞–ø–∏—à–∏—Ç–µ id –º–∞–º–æ–Ω—Ç–∞")
			bot.register_next_step_handler(message, mamont_delete_def_supports)
	except Exception as e:
		print(e)
		pass



@bot.message_handler(content_types=['text'])
def mamont_delete_def(message):
	try:
		if message.text.isdigit():

			BD = SQLt()

			ignor = BD.get_mamonts(message.chat.id)
			lst_ignors = []
			if len(ignor) > 0:
				lst_ignors = [x[0] for x in ignor]


			ignor = BD.get_id_for_boss(message.chat.id)
			lst_ignor = []
			if len(ignor) > 0:
				lst_ignor = [x[0] for x in ignor]


			bot.delete_message(message.from_user.id, message.message_id-1)
			bot.delete_message(message.from_user.id, message.message_id)
			if int(message.text) in lst_ignor:
				if int(message.text) not in lst_ignors:
					if BD.new_ignor_mamont(message.from_user.id,int(message.text)):
						BD.close()
						bot.send_message(message.chat.id,f"–í—Å–µ —Ö–æ—Ä–æ—à–æ")
					else:
						BD.close()
						bot.send_message(message.chat.id,f"–û—à–∏–±–∫–∞")
				else:
					BD.close()
					bot.send_message(message.chat.id,f"–í—ã –µ–≥–æ —É–∂–µ –∏–≥–Ω–æ—Ä–∏—Ç–µ")
			else:
				BD.close()
				bot.send_message(message.chat.id,f"–¢–∞–∫–æ–π id –≤ –≤–∞—à–µ–º  –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
				bot.register_next_step_handler(message, mamont_delete_def)
		else:
			bot.delete_message(message.from_user.id, message.message_id-1)
			bot.delete_message(message.from_user.id, message.message_id)
			bot.send_message(message.chat.id,f"–ù–∞–ø–∏—à–∏—Ç–µ id –º–∞–º–æ–Ω—Ç–∞")
			bot.register_next_step_handler(message, mamont_delete_def)
	except Exception as e:
		print(e)
		pass

@bot.message_handler(content_types=['text'])
def create_promo(message):

	try:
		if message.text.isdigit():
			summ = int(message.text)
			if summ>maxpromo:
				bot.send_message(message.chat.id,f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {maxpromo}")
				bot.register_next_step_handler(message, create_promo)
			elif summ<=0:
				bot.send_message(message.chat.id,f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
				bot.register_next_step_handler(message, create_promo)
			else:
				letters = string.ascii_letters
				codecode = ( ''.join(random.choice(letters) for i in range(10)) )
				BD = SQLt()

				BD.xyita(summ,codecode)

				BD.close()

				bot.send_message(message.chat.id,f"ü§ë –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: `{codecode}`",parse_mode='Markdown')
				bot.register_next_step_handler(message, main_message)


		else:
			bot.send_message(message.chat.id,"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

	except Exception as e:
		pass




@bot.message_handler(content_types=['text'])
def workstatus(message):


	try:

		if ":" in message.text:

			m = message.text.split(":")

			if m[0].isdigit() and m[1].isdigit():
				if int(m[1])==1 or int(m[1])==0 or int(m[1])==2:

					BD = SQLt()

					est = BD.counts_users_for_name(m[0])

					if est == 0:
						BD.close()
						bot.send_message(message.chat.id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
						bot.register_next_step_handler(message, workstatus)
					else:

						if int(m[1]) == 1:
							BD.update_stat1(int(m[0]))
						elif int(m[1]) == 0:
							BD.update_stat(int(m[0]))
						elif int(m[1]) == 2:
							BD.update_stat2(int(m[0]))

						BD.close()

						bot.send_message(message.chat.id,f"–ì–æ—Ç–æ–≤–æ !",reply_markup=rem)
						bot.send_message(message.chat.id,f"üêµ –í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å",reply_markup=workerpanel())
						bot.register_next_step_handler(message, main_message)

				else:
					bot.send_message(message.chat.id,f"–ú–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å 0,1 –∏–ª–∏ 2")
					bot.register_next_step_handler(message, workstatus)
			else:
				bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
				bot.register_next_step_handler(message, workstatus)
		elif message.text == "–û—Ç–º–µ–Ω–∞":
			bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=rem)
			bot.send_message(message.from_user.id, f"–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ @{TP_mamontsTP}\n\n–¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ - http://t.me/{bot_username}?start={message.chat.id}\n\nQIWI —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{numbers}\n–ö–∞—Ä—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{cards}",reply_markup=workerpanel(), parse_mode="HTML")
			bot.register_next_step_handler(message, main_message)

		else:
			bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
			bot.register_next_step_handler(message, workstatus)

	except Exception as e:
		raise


@bot.message_handler(content_types=['text'])
def dobavleniebalance(message):


	try:

		if ":" in message.text:

			m = message.text.split(":")

			if m[0].isdigit() and m[1].isdigit():
				if int(m[1])>=0:
					BD = SQLt()

					est = BD.counts_users_for_name(m[0])

					if est == 0:
						BD.close()
						bot.send_message(message.chat.id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
						bot.register_next_step_handler(message, dobavleniebalance)
					else:

						BD.update_balance(int(m[1]),int(m[0]))

						BD.close()

						bot.send_message(message.chat.id,f"–ì–æ—Ç–æ–≤–æ !",reply_markup=rem)
						bot.send_message(message.chat.id,f"üêµ –í–æ—Ä–∫–µ—Ä –ø–∞–Ω–µ–ª—å",reply_markup=workerpanel())
						bot.register_next_step_handler(message, main_message)

				else:
					bot.send_message(message.chat.id,f"–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
					bot.register_next_step_handler(message, dobavleniebalance)
			else:
				bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
				bot.register_next_step_handler(message, dobavleniebalance)
		elif message.text == "–û—Ç–º–µ–Ω–∞":
			bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=rem)
			bot.send_message(message.from_user.id, f"–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ @{TP_mamontsTP}\n\n–¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ - http://t.me/{bot_username}?start={message.chat.id}\n\nQIWI —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{numbers}\n–ö–∞—Ä—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏:\n{cards}",reply_markup=workerpanel(), parse_mode="HTML")
			bot.register_next_step_handler(message, main_message)

		else:
			bot.send_message(message.chat.id,f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
			bot.register_next_step_handler(message, dobavleniebalance)

	except Exception as e:
		raise

def create_fio(message):
	fio = message.text
	if fio != "–û—Ç–º–µ–Ω–∞":
		BD = SQLt()
		BD.save_fio(message.chat.id, fio)
		BD.close()
		bot.send_message(message.chat.id, f"üîÑ –í–∞—à–µ –§.–ò.–û –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=user())
	else:
		bot.send_message(message.chat.id,f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", reply_markup=user())

def create_stran(message):
	strana = message.text
	if strana != "–û—Ç–º–µ–Ω–∞":
		BD = SQLt()
		BD.save_strana(message.chat.id, strana)
		BD.close()
		bot.send_message(message.chat.id, f"üîÑ –í–∞—à–∞ —Å—Ç–∞—Ä–∞–Ω–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=user())
	else:
		bot.send_message(message.chat.id,f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", reply_markup=user())


def create_number(message):
	number = message.text
	if number.isdigit():
		BD = SQLt()
		BD.save_num(message.chat.id, number)
		BD.close()
		bot.send_message(message.chat.id, f"üîÑ –í–∞—à –Ω–æ–º–µ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=user())
	else:
		bot.send_message(message.chat.id,f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", reply_markup=user())

def create_card(message):
	card = message.text
	if card.isdigit():
		BD = SQLt()
		BD.save_card(message.chat.id, card)
		BD.close()
		bot.send_message(message.chat.id, f"üîÑ –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=user())
	else:
		bot.send_message(message.chat.id,f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", reply_markup=user())



def create_email(message):
	email = message.text
	if "@" in email:
		BD = SQLt()
		BD.save_email(message.chat.id, email)
		BD.close()
		bot.send_message(message.chat.id, f"üîÑ –í–∞—à–∞ –ø–æ—á—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=user())
	else:
		bot.send_message(message.chat.id,f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", reply_markup=user())


@bot.message_handler(content_types=['text'])
def req1(message):
	BD = SQLt()
	BD.req1(message)
	BD.close()


@bot.message_handler(content_types=['text'])
def req2(message):
	BD = SQLt()
	BD.req2(message)
	BD.close()


@bot.message_handler(content_types=['text'])
def popolnenie_info(message):
	BD = SQLt()
	BD.popolnenie_info(message)
	BD.close()

@bot.message_handler(content_types=['text'])
def update_tp(message):
	BD = SQLt()
	if (message.text).isdigit():
		if BD.get_all_info(int(message.text)) == None:
			bot.send_message(message.from_user.id,"–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		else:
			print(int(message.text),BD.active_get(message.from_user.id))
			BD.tp_update(int(message.text),BD.active_get(message.from_user.id))
	else:
		bot.send_message(message.from_user.id,"–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å ID")
	BD.close()




if __name__ == '__main__':
	bot.polling(none_stop=True)